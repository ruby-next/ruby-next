#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby27 < Parser::Base


  def version
    27
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-572,-102,277,214,215,-103,-110,-572,-572,-572,115,585,-572,-572,-572',
'221,-572,1029,1014,1136,1014,225,219,585,-572,626,-572,-572,-572,128',
'808,217,82,119,-88,-109,-572,-572,118,-572,-572,-572,-572,-572,83,585',
'585,585,-74,585,-96,-98,-95,-102,84,409,214,215,277,211,411,410,226',
'226,1013,807,-572,-572,-572,-572,-572,-572,-572,-572,-572,-572,-572',
'-572,-572,-572,222,220,-572,-572,-572,544,-572,-572,543,276,-572,625',
'828,-572,-572,-105,-572,226,-572,1030,-572,1137,-572,-572,-107,-572',
'-572,-572,-572,-572,-93,-572,-575,-572,-94,-101,-96,-98,-95,-575,-575',
'-575,272,-103,-575,-575,-575,-572,-575,119,-572,-572,-572,-572,118,-572',
'-575,-572,-575,-575,-575,119,-572,-572,-100,276,118,-572,-575,-575,226',
'-575,-575,-575,-575,-575,-96,-98,-95,-96,-98,-95,-97,119,119,119,856',
'119,118,118,118,-102,118,-96,-98,-95,-102,731,-575,-575,-575,-575,-575',
'-575,-575,-575,-575,-575,-575,-575,-575,-575,277,-110,-575,-575,-575',
'-109,-575,-575,-105,827,-575,598,-96,-575,-575,599,-575,628,-575,223',
'-575,-98,-575,-575,-107,-575,-575,-575,-575,-575,221,-575,-298,-575',
'820,-670,-97,270,598,-298,-298,-298,1041,-106,736,-298,-298,-575,-298',
'-103,-575,-575,-575,-575,-103,-575,-298,-575,212,-108,-587,-104,-575',
'-575,-106,213,-101,-575,-298,-298,-104,-298,-298,-298,-298,-298,-97',
'214,215,-97,-110,-108,808,627,214,215,119,276,-588,119,613,118,119,-97',
'118,222,216,118,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298',
'-298,-298,-298,214,215,-298,-298,-298,807,651,-110,-670,-102,-298,-109',
'-110,-298,-105,613,-109,-670,-298,-105,-298,613,-298,-298,-671,-298',
'-298,-298,-298,-298,-107,-298,-674,-298,-671,-107,465,-103,266,-674',
'-674,-674,615,614,325,-674,-674,-298,-674,-106,-298,-298,766,-99,-106',
'-298,-674,-674,-95,119,277,-97,-298,-298,118,-108,226,-108,-674,-674',
'-108,-674,-674,-674,-674,-674,-104,-572,-99,615,614,-104,96,97,-572',
'615,614,1014,759,760,96,97,761,113,114,768,1104,-110,-674,-674,-674',
'-674,-674,-674,-674,-674,-674,-674,-674,-674,-674,-674,214,215,-674',
'-674,-674,565,652,562,561,560,-674,563,272,-674,223,598,326,613,-674',
'1041,-674,-477,-674,-674,-587,-674,-674,-674,-674,-674,-572,-674,-674',
'-674,565,276,562,561,560,613,563,531,820,544,592,794,546,-674,98,99',
'-674,-674,-674,-97,795,-674,98,99,226,-674,-674,-674,-674,-674,-674',
'-674,-674,-106,-674,762,544,-93,399,546,412,-110,-674,-674,-674,-674',
'-674,615,614,611,464,-102,466,847,-674,-674,-588,-674,-674,-674,-674',
'-674,544,226,679,546,1069,-337,-109,615,614,611,-105,613,-337,646,-667',
'613,581,580,467,-107,1006,-337,-674,-674,-674,-674,-674,-674,-674,-674',
'-674,-674,-674,-674,-674,-674,225,-575,-674,-674,-674,-94,796,-674,-575',
'493,-674,647,502,-674,-674,613,-674,-583,-674,-103,-674,504,-674,-674',
'-583,-674,-674,-674,-674,-674,-572,-674,-674,-674,-337,-337,506,-572',
'-105,615,614,611,-667,615,614,616,-572,-674,613,128,-674,-674,-674,-674',
'613,-674,1104,-674,613,-73,531,-298,-674,-674,646,-667,-575,-106,-298',
'-298,-298,226,-107,-298,-298,-298,221,-298,592,615,614,618,-583,462',
'-582,-298,736,-298,-298,-298,517,-582,463,518,119,-572,-572,-298,-298',
'118,-298,-298,-298,-298,-298,851,820,-100,1011,1012,-585,-96,615,614',
'620,525,875,-585,615,614,624,-109,615,614,629,-105,-585,-298,-298,-298',
'-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,222,220,-298',
'-298,-298,-584,797,-298,-582,281,-298,226,-584,-298,-298,781,-298,-581',
'-298,647,-298,272,-298,-298,-581,-298,-298,-298,-298,-298,-578,-298',
'-298,-298,-585,-585,-104,-578,528,-298,-298,-298,263,264,534,-298,-298',
'-298,-298,570,-298,-298,-298,-298,246,-298,-298,-298,-579,573,-668,226',
'-298,-298,547,-579,-98,-108,-298,-298,-584,-298,-298,-298,-298,-298',
'-104,548,262,261,-107,-580,-581,221,1035,1036,119,506,-580,781,270,118',
'581,580,592,-578,401,574,-298,-298,-298,-298,-298,-298,-298,-298,-298',
'-298,-298,-298,-298,-298,-575,596,-298,-298,-298,597,651,-575,851,820',
'-298,-579,-668,-298,-586,605,-575,630,-298,633,-298,-586,-298,-298,-95',
'-298,-298,-298,-298,-298,-586,-298,-674,-298,-580,-668,222,-271,-104',
'-674,-674,-674,635,636,640,-674,-674,-298,-674,226,-298,-298,644,-298',
'221,-298,-674,-674,246,645,272,524,-298,-298,656,-575,-575,-108,-674',
'-674,522,-674,-674,-674,-674,-674,939,246,1018,-586,-586,-289,246,1016',
'246,246,573,1017,-289,226,243,226,226,-88,245,244,682,-289,-674,-674',
'-674,-674,-674,-674,-674,-674,-674,-674,-674,-674,-674,-674,226,570',
'-674,-674,-674,246,652,222,220,537,-674,573,574,-674,221,693,698,699',
'-674,226,-674,533,-674,-674,1027,-674,-674,-674,-674,-674,463,-674,-674',
'-674,-289,-289,701,243,705,708,709,245,244,711,581,580,713,-674,715',
'574,-674,-674,723,-674,724,-674,5,72,73,74,9,60,-674,-674,725,66,67',
'-106,727,732,70,-674,68,69,71,30,31,75,76,222,220,939,733,737,77,28',
'27,107,106,108,109,573,999,19,562,561,560,754,563,8,48,7,10,111,110',
'112,100,59,102,101,103,765,104,113,114,221,96,97,44,45,43,221,595,-674',
'769,770,-272,782,601,574,-674,593,493,493,226,-670,799,603,1026,-674',
'40,1027,800,33,221,266,61,62,-299,805,63,639,35,810,504,-299,47,506',
'-674,693,637,226,272,272,-299,20,693,246,820,226,94,82,85,86,845,87',
'89,88,90,226,222,220,820,83,93,853,222,220,-674,-674,854,65,226,84,98',
'99,226,864,-273,41,42,105,299,72,73,74,9,60,226,222,220,66,67,-299,-299',
'874,70,878,68,69,71,30,31,75,76,122,123,124,125,126,77,28,27,107,106',
'108,109,693,894,19,-271,898,902,903,641,8,48,301,10,111,110,112,100',
'59,102,101,103,708,104,113,114,905,96,97,44,45,43,246,250,251,252,253',
'263,264,258,259,254,255,-299,239,240,907,909,256,257,-299,40,911,911',
'303,226,917,61,62,-299,919,63,921,35,243,963,249,47,245,244,964,241',
'242,262,261,247,20,248,967,226,971,94,82,85,86,-274,87,89,88,90,973',
'708,976,978,83,93,980,260,982,-246,226,984,65,1008,84,98,99,1015,-299',
'-299,41,42,105,5,72,73,74,9,60,1031,1034,1040,66,67,1046,754,1057,70',
'1060,68,69,71,30,31,75,76,122,123,124,125,126,77,28,27,107,106,108,109',
'1065,1066,19,1067,1070,911,911,641,8,48,7,10,111,110,112,100,59,102',
'101,103,911,104,113,114,1075,96,97,44,45,43,246,250,251,252,253,263',
'264,258,259,254,255,-298,239,240,1008,957,256,257,-298,40,226,1095,33',
'-671,1096,61,62,-298,1099,63,1014,35,243,708,249,47,245,244,1109,241',
'242,262,261,247,20,248,1111,1113,1115,94,82,85,86,1115,87,89,88,90,698',
'1008,226,226,83,93,226,260,226,1014,1135,1139,65,1141,84,98,99,-671',
'-298,-298,41,42,105,299,72,73,74,9,60,-670,226,221,66,67,911,1008,1151',
'70,1059,68,69,71,30,31,75,76,1139,603,1014,1154,1115,77,28,27,107,106',
'108,109,1115,999,19,562,561,560,1115,563,8,48,301,10,111,110,112,100',
'59,102,101,103,1139,104,113,114,-298,96,97,44,45,43,221,-298,246,1139',
'1115,,-671,1064,222,220,-298,221,,,,,1062,,1059,40,,,33,,,61,62,603',
',63,,35,,,243,47,,,245,244,,241,242,,20,,,,,94,82,85,86,,87,89,88,90',
',-298,-298,,83,93,,222,220,,,,65,,84,98,99,,222,220,41,42,105,299,72',
'73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,122,123,124,125,126',
'77,28,27,107,106,108,109,,,19,122,123,124,125,126,8,48,301,10,111,110',
'112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,250,251,252',
'253,263,264,258,259,254,255,,239,240,,,256,257,,40,,,33,,,61,62,,,63',
',35,243,,249,47,245,244,,241,242,262,261,247,20,248,,,,94,82,85,86,',
'87,89,88,90,,,,,83,93,,260,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74',
'9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108',
'109,,,19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114',
',96,97,44,45,43,246,250,251,252,253,263,264,258,259,254,255,,239,240',
',,256,257,,40,,,303,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,262',
'261,247,20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,260,,,,,65,,84',
'98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,250,251,252,253',
'263,264,258,259,254,255,,239,240,,,256,257,,40,,,303,,,61,62,,,63,,35',
'243,,249,47,245,244,,241,242,262,261,247,20,248,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,226,260,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9',
'60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,246,250,251,252,253,263,264,258,259,254,255,,239,240,,,256',
'257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,262,261,247',
'20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,260,,,,,65,,84,98,99,',
',,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,',
',,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100,59',
'102,101,103,,104,113,114,,96,97,44,45,43,246,250,251,252,253,263,264',
'258,259,254,255,,239,240,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249',
'47,245,244,,241,242,262,261,247,20,248,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,260,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66',
'67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,',
',,,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44',
'45,43,246,250,251,252,253,263,264,258,259,254,255,,239,240,,,256,257',
',40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,262,261,247,20',
'248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,260,,,,,65,,84,98,99,,,,41',
'42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77',
'28,27,107,106,108,109,,565,19,562,561,560,,563,8,48,301,10,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,565,,562,561,560,,563',
',717,,565,,562,561,560,,563,720,,40,,,33,,,61,62,,,63,565,35,562,561',
'560,47,563,717,,,,,,,20,,720,717,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,717,,,65,,84,98,99,,916,,41,42,105,299,72,73,74,9,60,,,,66,67,,,',
'70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48',
'301,10,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,246',
'250,251,252,253,263,264,258,259,254,255,,-695,-695,,,256,257,,40,,,33',
',,61,62,,246,63,,35,243,,249,47,245,244,,241,242,262,261,247,20,248',
',,,94,82,85,86,,87,89,88,90,,,243,,83,93,245,244,,241,242,,65,,84,98',
'99,,,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,246,250,251,252,253,263',
'264,258,259,254,255,,-695,-695,,,256,257,,40,,,33,,,61,62,,,63,,35,243',
',249,47,245,244,,241,242,262,261,247,20,248,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66',
'67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,',
',,,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44',
'45,43,246,250,251,252,253,263,264,258,259,254,255,,-695,-695,,,256,257',
',40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,262,261,247,20',
'248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42',
'105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28',
'27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100,59,102,101',
'103,,104,113,114,,96,97,44,45,43,246,250,251,252,253,263,264,258,259',
'254,255,,-695,-695,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245',
'244,,241,242,262,261,247,20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68',
'69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,565,19,562,561,560',
',563,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96,97',
'44,45,43,246,-695,-695,-695,-695,263,264,,717,-695,-695,,,,,,256,257',
',40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,262,261,247,20',
'248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42',
'105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28',
'27,107,106,108,109,,565,19,562,561,560,,563,8,48,301,10,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,-695,-695,-695,-695',
'263,264,,717,-695,-695,,,,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249',
'47,245,244,,241,242,262,261,247,20,248,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67',
',,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,565,19,562',
'561,560,,563,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114',
',96,97,44,45,43,246,-695,-695,-695,-695,263,264,,717,-695,-695,,,,,',
'256,257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,262,261',
'247,20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99',
',,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,107,106,108,109,,565,19,562,561,560,,563,8,48,301,10,111',
'110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,-695,-695',
'-695,-695,263,264,,717,-695,-695,,,,,,256,257,,40,,,33,,,61,62,,,63',
',35,243,,249,47,245,244,,241,242,262,261,247,20,248,,,,94,82,85,86,',
'87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9',
'60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,246,-695,-695,-695,-695,263,264,,,-695,-695,,,,,,256,257',
',40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,262,261,247,20',
'248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42',
'105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28',
'27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100,59,102,101',
'103,,104,113,114,,96,97,44,45,43,246,-695,-695,-695,-695,263,264,,,-695',
'-695,,,,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241',
'242,262,261,247,20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65',
',84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110',
'112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,250,251,252',
'253,263,264,,,254,255,,,,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249',
'47,245,244,,241,242,262,261,247,20,248,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67',
',,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,',
'8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45',
'43,246,250,251,252,253,263,264,258,,254,255,,,,,,256,257,,40,,,33,,',
'61,62,,,63,,35,243,,249,47,245,244,,241,242,262,261,247,20,248,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299',
'72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107',
'106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,246,,,,,,,,,,,,,,,,256,257,,40,,,33,,,61,62',
',,63,,35,243,,249,47,245,244,,241,242,,,247,20,248,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60',
',,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,',
',19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,246,,,,,,,,,,,,,,,,256,257,,40,,,33,,,61,62,,,63,,35,243',
',249,47,245,244,,241,242,,,247,20,248,,,,94,82,85,86,,87,89,88,90,,',
',,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67,',
',,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8',
'48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43',
'246,,,,,,,,,,,,,,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245',
'244,,241,242,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,',
'84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110',
'112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,,,,,,,,,,,,',
',,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,,',
',20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77',
'28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100,59,102,101',
'103,,104,113,114,,96,97,44,45,43,246,,,,,,,,,,,,,,,,256,257,,40,,,33',
',,61,62,,,63,,35,243,,,47,245,244,,241,242,,,,20,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60',
',,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,',
',19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,',
',,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28',
'27,107,106,108,109,,,19,,,,,,8,48,7,10,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63',
',35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65',
',84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59',
'102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237',
',,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110',
'112,100,59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,',
',,,,,,231,,,237,,,61,62,,,63,,290,,288,,47,,,294,,,,,,236,,,,,94,291',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290,,288,,47',
',,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102',
'101,103,293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237',
',,61,62,,,63,,290,,288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88',
'90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,',
',,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,',
',,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,,,322',
',,,,,,,,,,,,,,,,,,,312,,,308,,,61,62,,,63,,307,,,,,,,,,,,,,,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74,,60,105,,,66',
'67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238',
',,,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,,,322',
',,,,,,,,,,,,,,,,,,,312,,,237,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,,,324,,,65,,84,98,99,72,73,74,,60,105,,,66',
'67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238',
',,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,',
',94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,',
',,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75',
'76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,',
',237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28',
'27,107,106,108,109,,,19,,,,,,8,48,,10,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63',
',35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65',
',84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319',
'75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100',
'59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,290,,,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89',
'88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238',
',,,,,,48,,,111,110,112,100,59,102,101,103,293,104,113,114,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,294,,,,,,236',
',,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42',
'105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27',
'107,106,108,109,,,19,,,,,,,48,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,',
',,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,119,,,,,118,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238',
',,,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,,,322',
',,,,,,,,,,,,,,,,,,,361,,,33,,,61,62,,,63,,35,,,,,,,,,,,,,,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74,,60,105,,,66',
'67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238',
',,,,,,316,,,111,110,112,366,59,102,101,367,,104,113,114,,96,97,,,322',
',,,,,,,,,,,,,,,,373,,,368,,,237,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74,,60,105,,,66',
'67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238',
',,,,,,316,,,111,110,112,366,59,102,101,367,,104,113,114,,96,97,,,322',
',,,,,,,,,,,,,,,,,,,368,,,237,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,,,105,178,189,179,202',
'175,195,185,184,205,206,200,183,182,177,203,207,208,187,176,190,194',
'196,188,181,,,,197,204,199,384,383,385,382,174,193,192,,,,,,173,180',
'171,172,379,380,381,377,133,102,101,378,,104,,,,,,162,163,,159,141,142',
'143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,389,,,,,,,,156,155',
',140,161,158,157,166,153,154,148,146,138,160,139,,,167,,,,,,72,73,74',
'9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,105,77,28,27,107,106,108',
'109,,,19,,,,,,8,48,7,10,111,110,112,100,59,102,101,103,,104,113,114',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,',
',,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,401,65,,84,98,99',
',,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,',
'77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112,100,59,102,101',
'103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62',
',,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,',
',65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,',
',237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,',
',,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,',
'111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,',
',,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,',
',19,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107',
'106,108,109,,,19,,,,,,8,48,,10,111,110,112,100,59,102,101,103,,104,113',
'114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47',
',,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99',
',,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,',
'77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101',
'103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62',
',,63,,417,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,',
',,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'30,31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,417,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,',
',,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,19,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107',
'106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113',
'114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47',
',,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99',
',,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,',
'77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101',
'103,293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61',
'62,,,63,,290,,288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,',
',111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,',
',,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,19,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107',
'106,108,109,,,19,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113',
'114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47',
',,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,226,,,,,,65,,84,98',
'99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76',
',,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59',
'102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237',
',,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111',
'110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,',
',,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238',
',,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,',
',94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,',
',,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75',
'76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,',
',237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100',
'59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,290,,288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87',
'89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,238,',
',,,,,48,,,111,110,112,100,59,102,101,103,293,104,113,114,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290,,288,,47,,,294,,,',
',,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,',
'41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77',
'28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
'293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62',
',,63,,290,,288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,',
'83,93,226,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,9,60,,,,66,67,,,',
'70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48',
',10,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,',
',,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,,,322,,,,,,,,,,,,,,,,,,,,312,,,237,,,61,62,,,63,,,,,,,,,,,,,,,,,',
',,94,82,85,86,,87,89,88,90,,,,,83,93,,,,520,,,65,,84,98,99,72,73,74',
',60,105,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106',
'108,109,,,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114',
',96,97,,,322,,,,,,,,,,,,,,,,,,,,312,,,308,,,61,62,,,63,,,,,,,,,,,,,',
',,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74',
',60,105,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106',
'108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,',
',,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99',
',,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,',
',,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,537',
',61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110',
'112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,',
',,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,',
',48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,',
',,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,19,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,',
',,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102',
'101,103,293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237',
',,61,62,,,63,,290,,288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88',
'90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,',
',,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,',
',,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43',
',,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106',
'108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,',
',,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99',
',,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,',
',,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110',
'112,100,59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,',
',,,,,,231,,,237,,,61,62,,,63,,676,,288,,47,,,294,,,,,,236,,,,,94,291',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104,113,114',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,288,,47',
',,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75',
'76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,',
',237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,9,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301',
'10,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,',
',,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,,,,,401,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,,,322,,,,,,,,,,,,,,,,,,,,312,,,308,,,61,62,,,63,,,,,,,,,,,,,,,,,',
',,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74,,60',
'105,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290,,288,,47',
',,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75',
'76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,316,,,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,,,322,,,,,,,,,,,,,,,,,,,,312,,,308',
',,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,',
',,,,,65,,84,98,99,72,73,74,,60,105,,,66,67,,,,70,,68,69,71,318,319,75',
'76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,',
',237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,19,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293',
'104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63',
',676,,,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,',
',,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110',
'112,100,59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,',
',,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,294,,,,,,236,,,,,94,291,85,86',
',87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109',
',,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290',
',,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102',
'101,103,293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237',
',,61,62,,,63,,290,,288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88',
'90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,',
',,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,',
',48,,,111,110,112,100,59,102,101,103,293,104,113,114,,96,97,44,45,43',
',,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290,,288,,47,,,294,,,,,,236',
',,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42',
'105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,773,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,',
',,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,',
',111,110,112,100,59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,',
',,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290,,288,,47,,,294,,,,,,236,',
',,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107',
'106,108,109,,,19,,,,,,8,48,,10,111,110,112,100,59,102,101,103,,104,113',
'114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47',
',,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99',
',,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,',
',,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110',
'112,100,59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,',
',,,,,,231,,,237,,,61,62,,,63,,676,,288,,47,,,294,,,,,,236,,,,,94,291',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104,113,114',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,288,,47',
',,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'30,31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,',
',111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,',
',,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,',
',,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75',
'76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,',
',237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'316,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,,,322,,,,,',
',,,,,,,,,,,,,,312,,,308,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74,,60,105,,,66,67,',
',,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,',
',,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,,,322',
',,,,,,,,,,,,,,,,,,,312,,,308,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74,,60,105,,,66,67',
',,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238',
',,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,417,,,,47,,,,,,,,,236',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,',
',,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110',
'112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,',
',,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,',
',,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,',
',,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106',
'108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,',
',,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99',
',,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,',
',,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110',
'112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,',
',,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238',
',,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,',
',94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,',
',,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110',
'112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,',
',,,231,,,237,,,61,62,,,63,,676,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238',
',,,,,,48,,,111,110,112,100,59,102,101,103,293,104,113,114,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,288,,47,,,294,,,',
',,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,',
'41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77',
'315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101',
'103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62',
',,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,',
',,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,316,,,111,110',
'112,100,59,102,101,103,,104,113,114,,96,97,,,322,,,,,,,,,,,,,,,,,,,',
'986,,,237,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,72,73,74,,60,105,,,66,67,,,,70,,68,69,71',
'318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,316,,,111',
'110,112,100,59,102,101,103,,104,113,114,,96,97,,,322,,,,,,,,,,,,,,,',
',,,,992,,,237,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74,,60,105,,,66,67,,,,70,,68,69',
'71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,316,,,111',
'110,112,100,59,102,101,103,,104,113,114,,96,97,,,322,,,,,,,,,,,,,,,',
',,,,986,,,237,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74,,60,105,,,66,67,,,,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110',
'112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,',
',,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,',
',48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,',
',,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290,,288,,47',
',,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,-417,,,41,42,105,,-417,-417,-417,,,-417,-417,-417,,-417,,,,,,',
',-417,-417,-417,-417,,,,,,,,,-417,-417,,-417,-417,-417,-417,-417,,,',
',,,,,,,,,,,,,,,,,,,-417,-417,-417,-417,-417,-417,-417,-417,-417,-417',
'-417,-417,-417,-417,,,-417,-417,-417,,,-417,,272,-417,,,-417,-417,,-417',
',-417,,-417,,-417,-417,,-417,-417,-417,-417,-417,-305,-417,-417,-417',
',,,-305,-305,-305,,,-305,-305,-305,,-305,-417,,,-417,-417,,-417,-305',
'-417,-305,-305,,,,,-417,-417,,,-305,-305,,-305,-305,-305,-305,-305,',
',,,,,,,,,,,,,,,,,,,,,-305,-305,-305,-305,-305,-305,-305,-305,-305,-305',
'-305,-305,-305,-305,,,-305,-305,-305,,,-305,,281,-305,,,-305,-305,,-305',
',-305,,-305,,-305,-305,,-305,-305,-305,-305,-305,-290,-305,,-305,,,',
'-290,-290,-290,,,-290,-290,-290,,-290,-305,,,-305,-305,,-305,-290,-305',
'-290,-290,-290,,,,-305,-305,,,-290,-290,,-290,-290,-290,-290,-290,,',
',,,,,,,,,,,,,,,,,,,,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290',
'-290,-290,-290,-290,,,-290,-290,-290,,,-290,,,-290,,,-290,-290,,-290',
',-290,,-290,,-290,-290,,-290,-290,-290,-290,-290,,-290,,-290,,,,,,565',
',562,561,560,570,563,,-290,,,-290,-290,-290,-290,573,-290,,-290,-254',
',,,-290,-290,,-254,-254,-254,,,-254,-254,-254,,-254,,568,,,,,,-254,-254',
'-254,-254,,581,580,,,,574,,-254,-254,,-254,-254,-254,-254,-254,,,,,',
',,,,,,,,,,,,,,,,,-254,-254,-254,-254,-254,-254,-254,-254,-254,-254,-254',
'-254,-254,-254,,,-254,-254,-254,,,-254,,272,-254,,,-254,-254,,-254,',
'-254,,-254,,-254,-254,,-254,-254,-254,-254,-254,,-254,-254,-254,565',
',562,561,560,570,563,,,,,,,-254,,573,-254,-254,-675,-254,,-254,,,,-675',
'-675,-675,-254,-254,-675,-675,-675,,-675,,,568,,,,,-675,-675,-675,-675',
'-675,,581,580,,,,574,-675,-675,,-675,-675,-675,-675,-675,,,,,,,,,,,',
',,,,,,,,,,,-675,-675,-675,-675,-675,-675,-675,-675,-675,-675,-675,-675',
'-675,-675,,,-675,-675,-675,,,-675,,,-675,,,-675,-675,,-675,,-675,,-675',
',-675,-675,,-675,-675,-675,-675,-675,,-675,-675,-675,,,,,,565,,562,561',
'560,570,563,,-675,,,-675,-675,-675,-675,573,-675,,-675,-676,,,,-675',
'-675,,-676,-676,-676,,,-676,-676,-676,,-676,,568,,,,,,-676,-676,-676',
'-676,-676,581,580,,,,574,,-676,-676,,-676,-676,-676,-676,-676,,,,,,',
',,,,,,,,,,,,,,,,-676,-676,-676,-676,-676,-676,-676,-676,-676,-676,-676',
'-676,-676,-676,,,-676,-676,-676,,,-676,,,-676,,,-676,-676,,-676,,-676',
',-676,,-676,-676,,-676,-676,-676,-676,-676,,-676,-676,-676,,,,,,,,,',
',,,,-676,,,-676,-676,-676,-676,,-676,,-676,-254,,,,-676,-676,,-254,-254',
'-254,,,-254,-254,-254,565,-254,562,561,560,570,563,,,-254,-254,-254',
',,,573,,107,106,108,109,-254,-254,,-254,-254,-254,-254,-254,,,,,111',
'110,112,,568,,565,,562,561,560,570,563,96,97,581,580,322,,,574,573,',
',,,,,,-254,,,,,,,-254,,,,,272,-254,568,,,,,,,,,578,577,581,580,,,,574',
',,,,-254,-254,,94,82,85,86,,87,89,88,90,,,,-254,83,93,-254,,,226,,-254',
'956,,84,98,99,,-254,178,189,179,202,175,195,185,184,205,206,200,183',
'182,177,203,207,208,187,176,190,194,196,188,181,,,,197,204,199,198,191',
'201,186,174,193,192,,,,,,173,180,171,172,168,169,170,131,133,130,,132',
',,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145,,,,164,165,151',
'152,,,,,,,,,,,,,,156,155,,140,161,158,157,166,153,154,148,146,138,160',
'139,,,167,94,,,,,,,,,,,,,,93,178,189,179,202,175,195,185,184,205,206',
'200,183,182,177,203,207,208,187,176,190,194,196,188,181,,,,197,204,199',
'198,191,201,186,174,193,192,,,,,,173,180,171,172,168,169,170,131,133',
',,132,,,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145,,,,164,165',
'151,152,,,,,,,,,,,,,,156,155,,140,161,158,157,166,153,154,148,146,138',
'160,139,,,167,94,,,,,,,,,,,,,,93,178,189,179,202,175,195,185,184,205',
'206,200,183,182,177,203,207,208,187,176,190,194,196,188,181,,,,197,204',
'199,198,191,201,186,174,193,192,,,,,,173,180,171,172,168,169,170,131',
'133,,,132,,,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145,,,,164',
'165,151,152,,,,,,,,,,,,,,156,155,,140,161,158,157,166,153,154,148,146',
'138,160,139,,,167,94,,,,,,,,,,,,,,93,178,189,179,202,175,195,185,184',
'205,206,200,183,182,177,203,207,208,187,176,190,194,196,188,181,,,,197',
'204,199,198,191,201,186,174,193,192,,,,,,173,180,171,172,168,169,170',
'131,133,,,132,,,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145',
',,,164,165,151,152,,,,,,,,,,,,,,156,155,,140,161,158,157,166,153,154',
'148,146,138,160,139,,,167,94,107,106,108,109,,,565,,562,561,560,570',
'563,93,,,111,110,112,957,,573,,960,939,,,,,96,97,,,322,573,,,,,,,,,568',
',,,,,,,,,959,581,580,934,,,574,932,,,933,,935,,,,,,,574,,,,,,,958,,',
',94,940,85,86,,87,89,88,90,,,,,83,93,107,106,108,109,,,956,,84,98,99',
',,,945,946,111,110,112,957,,,565,960,562,561,560,570,563,96,97,,,322',
',,,573,,,,,,,,,,,,,,,,959,,,934,,,568,932,,,933,,935,,,578,577,581,580',
',,,574,,,,958,,,,94,82,85,86,,87,89,88,90,,,,,83,93,226,107,106,108',
'109,,956,,84,98,99,,,,945,946,,111,110,112,957,,,565,960,562,561,560',
'570,563,96,97,,,322,,,,573,,,,,,,,,,,,,,,,959,,,934,,,568,932,,,933',
',,,,578,577,581,580,,,,574,,,,958,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,107,106,108,109,,,956,,84,98,99,,,,945,946,111,110,112,957,,,565',
'960,562,561,560,570,563,96,97,,,322,,,,573,,,,,,,,,,,,,,,,959,,,934',
',,568,932,,,933,,,,,578,577,581,580,,,,574,,,,958,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,107,106,108,109,,,956,,84,98,99,,,,945,946,111,110',
'112,957,,,565,960,562,561,560,570,563,96,97,,,322,,,,573,,,,,,,,,,,',
',,,,959,,,934,,,568,932,,,933,,935,,,578,577,581,580,,,,574,,,,958,',
',,94,82,85,86,,87,89,88,90,,,,,83,93,107,106,108,109,,,956,,84,98,99',
',,,945,946,111,110,112,957,,,565,960,562,561,560,570,563,96,97,,,322',
',,,573,,,,,,,,,,,,,,,,959,,,934,,,568,932,,,933,,,,,578,577,581,580',
',,,574,,,,958,,,,94,82,85,86,,87,89,88,90,,,,,83,93,107,106,108,109',
',,956,,84,98,99,,,,945,946,111,110,112,957,,,,960,939,,,,,96,97,,,322',
'573,,,,,,,,,,,,,,,,,,,959,,,934,,,,932,,,933,,935,,,,,,,574,,,,,,,958',
',,,94,940,85,86,,87,89,88,90,,,,,83,93,226,107,106,108,109,,956,,84',
'98,99,,,,945,946,,111,110,112,957,,,,960,939,,,,,96,97,,,322,573,,,',
',,,,,,,,,,,,,,,959,,,934,,,,932,,,933,,935,,,,,,,574,,,,,,,958,,,,94',
'940,85,86,,87,89,88,90,,,,,83,93,226,107,106,108,109,,956,,84,98,99',
',,,945,946,,111,110,112,957,,,565,960,562,561,560,570,563,96,97,,,322',
',,,573,,,,,,,,,,,,,,,,959,,,934,,,568,932,,,933,,1094,,,578,577,581',
'580,,,,574,,,,958,,,,94,82,85,86,,87,89,88,90,,,,,83,93,107,106,108',
'109,,,956,,84,98,99,,,,945,946,111,110,112,957,,,565,960,562,561,560',
'570,563,96,97,,,322,,,,573,,,,,,,,,,,,,,,,959,,,934,,,568,932,,,933',
',,,,578,577,581,580,,,,574,,,,958,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,107,106,108,109,,,956,,84,98,99,,,,945,946,111,110,112,957,,,565',
'960,562,561,560,570,563,96,97,,,322,,,,573,,,,,,,,,,,,,,,,959,,,934',
',,568,932,,,933,,,,,578,577,581,580,,,,574,,,,958,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,107,106,108,109,,,956,,84,98,99,,,,945,946,111,110',
'112,957,,,565,960,562,561,560,570,563,96,97,,,322,,,,573,,,,,,,,,,,',
',,,,959,,,934,,,568,932,,,933,,,,,,,581,580,,,,574,,,,958,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,107,106,108,109,,,956,,84,98,99,,,,945,946',
'111,110,112,957,,,565,960,562,561,560,570,563,96,97,,,322,,,,573,,,',
',,,,,,,,,,,,959,,,934,,,568,932,,,933,,,,,578,577,581,580,,,,574,,,',
'958,,,,94,82,85,86,,87,89,88,90,,,,,83,93,107,106,108,109,,,956,,84',
'98,99,,,,945,946,111,110,112,957,,,565,960,562,561,560,570,563,96,97',
',,322,,,,573,,,,,,,,,,,,,,,,959,,,934,,,568,932,,,933,,,,,,,581,580',
',,,574,,,,958,,,,94,82,85,86,,87,89,88,90,,,,,83,93,107,106,108,109',
',,956,,84,98,99,,,,945,946,111,110,112,957,,,565,960,562,561,560,570',
'563,96,97,,,322,,,,573,,,,,,,,,,,,,,,,959,,,934,,,568,932,,,933,,,,',
',,581,580,,,,574,,,,958,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'956,,84,98,99,,,,945,946,178,189,179,202,175,195,185,184,205,206,200',
'183,182,177,203,207,208,187,176,190,194,196,188,181,,,,197,204,199,198',
'191,201,186,174,193,192,,,,,,173,180,171,172,168,169,170,131,133,,,132',
',,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145,,,,164,165,151',
'152,,,,,,,,,,,,,,156,155,,140,161,158,157,166,153,154,148,146,138,160',
'139,,,167,107,106,108,109,,,,565,,562,561,560,570,563,,,111,110,112',
',,,573,,,,,,,96,97,,,322,107,106,108,109,,,,,,,568,551,,,,,111,110,112',
'578,577,581,580,,,,574,,,96,97,,,322,,,,,,,,,,,,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,,,,956,,84,98,99,,,,,,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,107,106,108,109,,,956,,84,98,99,,,,,,111,110,112,439,443',
',,440,,,,,,96,97,162,163,322,159,141,142,143,150,147,149,,,144,145,',
',,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166,153,154',
'148,146,138,160,139,,,167,94,82,85,86,,87,89,88,90,,,,,83,93,446,450',
',,445,,956,,84,98,99,,162,163,,159,141,142,143,150,147,149,,,144,145',
',,,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166,153',
'154,148,146,138,160,139,453,443,167,,454,,,,,,,,162,163,,159,141,142',
'143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,,,,,,,,,156,155,,140',
'161,158,157,166,153,154,148,146,138,160,139,453,443,167,,454,,,,,,,',
'162,163,,159,141,142,143,150,147,149,,,144,145,,,,164,165,151,152,,',
',,,,,,,,,,,156,155,,140,161,158,157,166,153,154,148,146,138,160,139',
'657,443,167,,658,,,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145',
',,,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166,153',
'154,148,146,138,160,139,659,450,167,,660,,,,,,,,162,163,,159,141,142',
'143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,272,,,,,,,,156,155',
',140,161,158,157,166,153,154,148,146,138,160,139,686,443,167,,687,,',
',,,,,162,163,,159,141,142,143,150,147,149,,,144,145,,,,164,165,151,152',
',,,,,272,,,,,,,,156,155,,140,161,158,157,166,153,154,148,146,138,160',
'139,689,450,167,,690,,,,,,,,162,163,,159,141,142,143,150,147,149,,,144',
'145,,,,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166',
'153,154,148,146,138,160,139,657,443,167,,658,,,,,,,,162,163,,159,141',
'142,143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,272,,,,,,,,156',
'155,,140,161,158,157,166,153,154,148,146,138,160,139,659,450,167,,660',
',,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145,,,,164,165,151',
'152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166,153,154,148,146,138',
'160,139,740,443,167,,741,,,,,,,,162,163,,159,141,142,143,150,147,149',
',,144,145,,,,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157',
'166,153,154,148,146,138,160,139,742,450,167,,743,,,,,,,,162,163,,159',
'141,142,143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,272,,,,,,',
',156,155,,140,161,158,157,166,153,154,148,146,138,160,139,745,450,167',
',746,,,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145,,,,164,165',
'151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166,153,154,148,146',
'138,160,139,453,443,167,,454,,,,,,,,162,163,,159,141,142,143,150,147',
'149,,,144,145,,,,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158',
'157,166,153,154,148,146,138,160,139,775,443,167,,776,,,,,,,,162,163',
',159,141,142,143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,272,',
',,,,,,156,155,,140,161,158,157,166,153,154,148,146,138,160,139,778,450',
'167,,777,,,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145,,,,164',
'165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166,153,154,148',
'146,138,160,139,1119,450,167,,1118,,,,,,,,162,163,,159,141,142,143,150',
'147,149,,,144,145,,,,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161',
'158,157,166,153,154,148,146,138,160,139,1122,443,167,,1123,,,,,,,,162',
'163,,159,141,142,143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,272',
',,,,,,,156,155,,140,161,158,157,166,153,154,148,146,138,160,139,1124',
'450,167,,1125,,,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145',
',,,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166,153',
'154,148,146,138,160,139,,565,167,562,561,560,570,563,565,,562,561,560',
'570,563,,573,,,,,,,573,,,,,,,,,,,,,,,568,,,,,,,568,,,,581,580,,,,574',
',581,580,,,,574' ]
        racc_action_table = arr = ::Array.new(28631, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'100,358,64,458,458,359,362,100,100,100,1,350,100,100,100,16,100,935',
'924,1094,1028,19,16,351,100,396,100,100,100,7,670,16,80,3,681,596,100',
'100,3,100,100,100,100,100,80,738,897,920,681,922,686,687,815,989,80',
'130,610,610,26,10,130,130,19,1028,924,670,100,100,100,100,100,100,100',
'100,100,100,100,100,100,100,16,16,100,100,100,340,100,100,340,64,100',
'396,703,100,100,740,100,458,100,935,100,1094,100,100,741,100,100,100',
'100,100,358,100,103,100,359,362,686,687,815,103,103,103,26,990,103,103',
'103,100,103,350,100,100,100,100,350,100,103,100,103,103,103,351,100',
'100,596,26,351,100,103,103,610,103,103,103,103,103,686,687,815,686,687',
'815,689,738,897,920,738,922,738,897,920,989,922,686,687,815,989,587',
'103,103,103,103,103,103,103,103,103,103,103,103,103,103,666,993,103',
'103,103,1065,103,103,1122,703,103,368,740,103,103,368,103,397,103,17',
'103,741,103,103,1123,103,103,103,103,103,24,103,445,103,1130,689,689',
'24,959,445,445,445,959,1124,1130,445,445,103,445,990,103,103,103,103',
'990,103,445,103,12,1125,229,858,103,103,742,13,17,103,445,445,1146,445',
'445,445,445,445,689,606,606,689,17,743,801,397,696,696,297,666,230,587',
'621,297,355,689,587,24,15,355,445,445,445,445,445,445,445,445,445,445',
'445,445,445,445,14,14,445,445,445,801,445,993,1124,229,445,1065,993',
'445,1122,1097,1065,742,445,1122,445,623,445,445,1125,445,445,445,445',
'445,1123,445,446,445,743,1123,232,230,22,446,446,446,621,621,37,446',
'446,445,446,1124,445,445,621,445,1124,445,446,446,858,606,317,742,445',
'445,606,1125,696,445,446,446,1125,446,446,446,446,446,1146,377,743,1097',
'1097,1146,43,43,377,623,623,1019,614,614,322,322,614,614,614,623,1097',
'232,446,446,446,446,446,446,446,446,446,446,446,446,446,446,349,349',
'446,446,446,720,446,720,720,720,446,720,317,446,424,1018,40,508,446',
'1018,446,1019,446,446,38,446,446,446,446,446,377,446,446,446,916,317',
'916,916,916,391,916,464,962,341,962,657,341,446,43,43,446,446,659,446',
'658,446,322,322,48,659,659,659,446,446,659,659,659,446,659,614,344,38',
'115,344,209,424,659,659,659,659,659,508,508,508,231,38,233,720,659,659',
'39,659,659,659,659,659,702,997,508,702,997,49,464,391,391,391,657,1033',
'49,775,366,392,708,708,234,658,916,49,659,659,659,659,659,659,659,659',
'659,659,659,659,659,659,238,378,659,659,659,39,659,659,378,271,659,776',
'285,659,659,393,659,379,659,39,659,286,659,659,379,659,659,659,659,659',
'366,659,659,659,49,49,289,366,775,1033,1033,1033,366,392,392,392,366',
'659,394,301,659,659,659,659,395,659,1033,659,398,302,326,660,659,659',
'439,366,378,659,660,660,660,304,776,660,660,660,228,660,590,393,393',
'393,379,228,380,660,590,660,660,660,305,380,228,306,862,366,366,660',
'660,862,660,660,660,660,660,726,726,326,923,923,309,439,394,394,394',
'312,798,309,395,395,395,326,398,398,398,439,309,660,660,660,660,660',
'660,660,660,660,660,660,660,660,660,228,228,660,660,660,381,660,660',
'380,315,660,316,381,660,660,871,660,382,660,440,660,321,660,660,382',
'660,660,660,660,660,383,660,777,660,309,309,798,383,323,777,777,777',
'46,46,330,777,777,660,777,705,660,660,660,660,332,660,777,660,384,705',
'367,338,660,660,342,384,440,660,777,777,381,777,777,777,777,777,871',
'343,46,46,440,385,382,387,942,942,867,345,385,642,387,867,705,705,356',
'383,357,705,777,777,777,777,777,777,777,777,777,777,777,777,777,777',
'367,361,777,777,777,363,777,367,1077,1077,777,384,367,777,310,372,367',
'407,777,413,777,310,777,777,642,777,777,777,777,777,310,777,778,777',
'385,367,387,416,642,778,778,778,418,421,425,778,778,777,778,435,777',
'777,437,777,311,777,778,778,470,438,447,311,777,777,460,367,367,777',
'778,778,311,778,778,778,778,778,1031,472,931,310,310,313,473,931,474',
'475,1031,931,313,495,470,499,515,516,470,470,519,313,778,778,778,778',
'778,778,778,778,778,778,778,778,778,778,521,973,778,778,778,471,778',
'311,311,526,778,973,1031,778,327,529,538,539,778,540,778,327,778,778',
'1031,778,778,778,778,778,327,778,778,778,313,313,541,471,553,554,556',
'471,471,557,973,973,558,778,567,973,778,778,575,778,579,778,0,0,0,0',
'0,0,778,778,582,0,0,778,584,588,0,745,0,0,0,0,0,0,0,327,327,933,589',
'591,0,0,0,0,0,0,0,933,902,0,902,902,902,608,902,0,0,0,0,0,0,0,0,0,0',
'0,0,618,0,0,0,360,0,0,0,0,0,370,360,745,626,628,634,643,370,933,745',
'360,648,653,661,745,662,370,933,745,0,933,663,0,423,665,0,0,525,669',
'0,423,0,671,673,525,0,675,745,683,423,685,688,691,525,0,692,695,697',
'704,0,0,0,0,719,0,0,0,0,721,360,360,728,0,0,734,370,370,745,745,735',
'0,739,0,0,0,748,752,772,0,0,0,33,33,33,33,33,33,774,423,423,33,33,525',
'525,783,33,804,33,33,33,33,33,33,33,6,6,6,6,6,33,33,33,33,33,33,33,814',
'818,33,821,822,829,830,428,33,33,33,33,33,33,33,33,33,33,33,33,831,33',
'33,33,835,33,33,33,33,33,428,428,428,428,428,428,428,428,428,428,428',
'599,428,428,836,838,428,428,599,33,839,841,33,844,846,33,33,599,849',
'33,852,33,428,859,428,33,428,428,861,428,428,428,428,428,33,428,865',
'866,869,33,33,33,33,870,33,33,33,33,879,880,882,883,33,33,884,428,886',
'428,887,888,33,918,33,33,33,928,599,599,33,33,33,128,128,128,128,128',
'128,936,941,958,128,128,966,970,983,128,986,128,128,128,128,128,128',
'128,300,300,300,300,300,128,128,128,128,128,128,128,992,995,128,996',
'1001,1002,1003,434,128,128,128,128,128,128,128,128,128,128,128,128,1004',
'128,128,128,1005,128,128,128,128,128,434,434,434,434,434,434,434,434',
'434,434,434,690,434,434,1007,1014,434,434,690,128,1020,1024,128,690',
'1025,128,128,690,1029,128,1032,128,434,1048,434,128,434,434,1051,434',
'434,434,434,434,128,434,1052,1053,1054,128,128,128,128,1056,128,128',
'128,128,1061,1076,1084,1085,128,128,1087,434,1088,1092,1093,1100,128',
'1107,128,128,128,1118,690,690,128,128,128,211,211,211,211,211,211,1119',
'1121,985,211,211,1127,1128,1136,211,985,211,211,211,211,211,211,211',
'1138,985,1140,1142,1143,211,211,211,211,211,211,211,1144,1069,211,1069',
'1069,1069,1145,1069,211,211,211,211,211,211,211,211,211,211,211,211',
'1152,211,211,211,746,211,211,211,211,211,991,746,485,1159,1160,,746',
'991,985,985,746,1058,,,,,991,,1058,211,,,211,,,211,211,1058,,211,,211',
',,485,211,,,485,485,,485,485,,211,,,,,211,211,211,211,,211,211,211,211',
',746,746,,211,211,,991,991,,,,211,,211,211,211,,1058,1058,211,211,211',
'237,237,237,237,237,237,,,,237,237,,,,237,,237,237,237,237,237,237,237',
'337,337,337,337,337,237,237,237,237,237,237,237,,,237,513,513,513,513',
'513,237,237,237,237,237,237,237,237,237,237,237,237,,237,237,237,,237',
'237,237,237,237,21,21,21,21,21,21,21,21,21,21,21,,21,21,,,21,21,,237',
',,237,,,237,237,,,237,,237,21,,21,237,21,21,,21,21,21,21,21,237,21,',
',,237,237,237,237,,237,237,237,237,,,,,237,237,,21,,,,,237,,237,237',
'237,,,,237,237,237,303,303,303,303,303,303,,,,303,303,,,,303,,303,303',
'303,303,303,303,303,,,,,,303,303,303,303,303,303,303,,,303,,,,,,303',
'303,303,303,303,303,303,303,303,303,303,303,,303,303,303,,303,303,303',
'303,303,283,283,283,283,283,283,283,283,283,283,283,,283,283,,,283,283',
',303,,,303,,,303,303,,,303,,303,283,,283,303,283,283,,283,283,283,283',
'283,303,283,,,,303,303,303,303,,303,303,303,303,,,,,303,303,,283,,,',
',303,,303,303,303,,,,303,303,303,308,308,308,308,308,308,,,,308,308',
',,,308,,308,308,308,308,308,308,308,,,,,,308,308,308,308,308,308,308',
',,308,,,,,,308,308,308,308,308,308,308,308,308,308,308,308,,308,308',
'308,,308,308,308,308,308,489,489,489,489,489,489,489,489,489,489,489',
',489,489,,,489,489,,308,,,308,,,308,308,,,308,,308,489,,489,308,489',
'489,,489,489,489,489,489,308,489,,,,308,308,308,308,,308,308,308,308',
',,,,308,308,489,489,,,,,308,,308,308,308,,,,308,308,308,336,336,336',
'336,336,336,,,,336,336,,,,336,,336,336,336,336,336,336,336,,,,,,336',
'336,336,336,336,336,336,,,336,,,,,,336,336,336,336,336,336,336,336,336',
'336,336,336,,336,336,336,,336,336,336,336,336,536,536,536,536,536,536',
'536,536,536,536,536,,536,536,,,536,536,,336,,,336,,,336,336,,,336,,336',
'536,,536,336,536,536,,536,536,536,536,536,336,536,,,,336,336,336,336',
',336,336,336,336,,,,,336,336,,536,,,,,336,,336,336,336,,,,336,336,336',
'353,353,353,353,353,353,,,,353,353,,,,353,,353,353,353,353,353,353,353',
',,,,,353,353,353,353,353,353,353,,,353,,,,,,353,353,353,353,353,353',
'353,353,353,353,353,353,,353,353,353,,353,353,353,353,353,780,780,780',
'780,780,780,780,780,780,780,780,,780,780,,,780,780,,353,,,353,,,353',
'353,,,353,,353,780,,780,353,780,780,,780,780,780,780,780,353,780,,,',
'353,353,353,353,,353,353,353,353,,,,,353,353,,780,,,,,353,,353,353,353',
',,,353,353,353,354,354,354,354,354,354,,,,354,354,,,,354,,354,354,354',
'354,354,354,354,,,,,,354,354,354,354,354,354,354,,,354,,,,,,354,354',
'354,354,354,354,354,354,354,354,354,354,,354,354,354,,354,354,354,354',
'354,876,876,876,876,876,876,876,876,876,876,876,,876,876,,,876,876,',
'354,,,354,,,354,354,,,354,,354,876,,876,354,876,876,,876,876,876,876',
'876,354,876,,,,354,354,354,354,,354,354,354,354,,,,,354,354,,876,,,',
',354,,354,354,354,,,,354,354,354,583,583,583,583,583,583,,,,583,583',
',,,583,,583,583,583,583,583,583,583,,,,,,583,583,583,583,583,583,583',
',568,583,568,568,568,,568,583,583,583,583,583,583,583,583,583,583,583',
'583,,583,583,583,,583,583,583,583,583,717,,717,717,717,,717,,568,,847',
',847,847,847,,847,568,,583,,,583,,,583,583,,,583,845,583,845,845,845',
'583,845,717,,,,,,,583,,717,847,,583,583,583,583,,583,583,583,583,,,',
',583,583,,,,845,,,583,,583,583,583,,845,,583,583,583,586,586,586,586',
'586,586,,,,586,586,,,,586,,586,586,586,586,586,586,586,,,,,,586,586',
'586,586,586,586,586,,,586,,,,,,586,586,586,586,586,586,586,586,586,586',
'586,586,,586,586,586,,586,586,586,586,586,328,328,328,328,328,328,328',
'328,328,328,328,,328,328,,,328,328,,586,,,586,,,586,586,,486,586,,586',
'328,,328,586,328,328,,328,328,328,328,328,586,328,,,,586,586,586,586',
',586,586,586,586,,,486,,586,586,486,486,,486,486,,586,,586,586,586,',
',,586,586,586,607,607,607,607,607,607,,,,607,607,,,,607,,607,607,607',
'607,607,607,607,,,,,,607,607,607,607,607,607,607,,,607,,,,,,607,607',
'607,607,607,607,607,607,607,607,607,607,,607,607,607,,607,607,607,607',
'607,329,329,329,329,329,329,329,329,329,329,329,,329,329,,,329,329,',
'607,,,607,,,607,607,,,607,,607,329,,329,607,329,329,,329,329,329,329',
'329,607,329,,,,607,607,607,607,,607,607,607,607,,,,,607,607,,,,,,,607',
',607,607,607,,,,607,607,607,744,744,744,744,744,744,,,,744,744,,,,744',
',744,744,744,744,744,744,744,,,,,,744,744,744,744,744,744,744,,,744',
',,,,,744,744,744,744,744,744,744,744,744,744,744,744,,744,744,744,,744',
'744,744,744,744,468,468,468,468,468,468,468,468,468,468,468,,468,468',
',,468,468,,744,,,744,,,744,744,,,744,,744,468,,468,744,468,468,,468',
'468,468,468,468,744,468,,,,744,744,744,744,,744,744,744,744,,,,,744',
'744,,,,,,,744,,744,744,744,,,,744,744,744,749,749,749,749,749,749,,',
',749,749,,,,749,,749,749,749,749,749,749,749,,,,,,749,749,749,749,749',
'749,749,,,749,,,,,,749,749,749,749,749,749,749,749,749,749,749,749,',
'749,749,749,,749,749,749,749,749,469,469,469,469,469,469,469,469,469',
'469,469,,469,469,,,469,469,,749,,,749,,,749,749,,,749,,749,469,,469',
'749,469,469,,469,469,469,469,469,749,469,,,,749,749,749,749,,749,749',
'749,749,,,,,749,749,,,,,,,749,,749,749,749,,,,749,749,749,753,753,753',
'753,753,753,,,,753,753,,,,753,,753,753,753,753,753,753,753,,,,,,753',
'753,753,753,753,753,753,,917,753,917,917,917,,917,753,753,753,753,753',
'753,753,753,753,753,753,753,,753,753,753,,753,753,753,753,753,479,479',
'479,479,479,479,479,,917,479,479,,,,,,479,479,,753,,,753,,,753,753,',
',753,,753,479,,479,753,479,479,,479,479,479,479,479,753,479,,,,753,753',
'753,753,,753,753,753,753,,,,,753,753,,,,,,,753,,753,753,753,,,,753,753',
'753,764,764,764,764,764,764,,,,764,764,,,,764,,764,764,764,764,764,764',
'764,,,,,,764,764,764,764,764,764,764,,1006,764,1006,1006,1006,,1006',
'764,764,764,764,764,764,764,764,764,764,764,764,,764,764,764,,764,764',
'764,764,764,480,480,480,480,480,480,480,,1006,480,480,,,,,,480,480,',
'764,,,764,,,764,764,,,764,,764,480,,480,764,480,480,,480,480,480,480',
'480,764,480,,,,764,764,764,764,,764,764,764,764,,,,,764,764,,,,,,,764',
',764,764,764,,,,764,764,764,809,809,809,809,809,809,,,,809,809,,,,809',
',809,809,809,809,809,809,809,,,,,,809,809,809,809,809,809,809,,1008',
'809,1008,1008,1008,,1008,809,809,809,809,809,809,809,809,809,809,809',
'809,,809,809,809,,809,809,809,809,809,481,481,481,481,481,481,481,,1008',
'481,481,,,,,,481,481,,809,,,809,,,809,809,,,809,,809,481,,481,809,481',
'481,,481,481,481,481,481,809,481,,,,809,809,809,809,,809,809,809,809',
',,,,809,809,,,,,,,809,,809,809,809,,,,809,809,809,820,820,820,820,820',
'820,,,,820,820,,,,820,,820,820,820,820,820,820,820,,,,,,820,820,820',
'820,820,820,820,,1075,820,1075,1075,1075,,1075,820,820,820,820,820,820',
'820,820,820,820,820,820,,820,820,820,,820,820,820,820,820,482,482,482',
'482,482,482,482,,1075,482,482,,,,,,482,482,,820,,,820,,,820,820,,,820',
',820,482,,482,820,482,482,,482,482,482,482,482,820,482,,,,820,820,820',
'820,,820,820,820,820,,,,,820,820,,,,,,,820,,820,820,820,,,,820,820,820',
'857,857,857,857,857,857,,,,857,857,,,,857,,857,857,857,857,857,857,857',
',,,,,857,857,857,857,857,857,857,,,857,,,,,,857,857,857,857,857,857',
'857,857,857,857,857,857,,857,857,857,,857,857,857,857,857,483,483,483',
'483,483,483,483,,,483,483,,,,,,483,483,,857,,,857,,,857,857,,,857,,857',
'483,,483,857,483,483,,483,483,483,483,483,857,483,,,,857,857,857,857',
',857,857,857,857,,,,,857,857,,,,,,,857,,857,857,857,,,,857,857,857,863',
'863,863,863,863,863,,,,863,863,,,,863,,863,863,863,863,863,863,863,',
',,,,863,863,863,863,863,863,863,,,863,,,,,,863,863,863,863,863,863,863',
'863,863,863,863,863,,863,863,863,,863,863,863,863,863,484,484,484,484',
'484,484,484,,,484,484,,,,,,484,484,,863,,,863,,,863,863,,,863,,863,484',
',484,863,484,484,,484,484,484,484,484,863,484,,,,863,863,863,863,,863',
'863,863,863,,,,,863,863,,,,,,,863,,863,863,863,,,,863,863,863,877,877',
'877,877,877,877,,,,877,877,,,,877,,877,877,877,877,877,877,877,,,,,',
'877,877,877,877,877,877,877,,,877,,,,,,877,877,877,877,877,877,877,877',
'877,877,877,877,,877,877,877,,877,877,877,877,877,487,487,487,487,487',
'487,487,,,487,487,,,,,,487,487,,877,,,877,,,877,877,,,877,,877,487,',
'487,877,487,487,,487,487,487,487,487,877,487,,,,877,877,877,877,,877',
'877,877,877,,,,,877,877,,,,,,,877,,877,877,877,,,,877,877,877,894,894',
'894,894,894,894,,,,894,894,,,,894,,894,894,894,894,894,894,894,,,,,',
'894,894,894,894,894,894,894,,,894,,,,,,894,894,894,894,894,894,894,894',
'894,894,894,894,,894,894,894,,894,894,894,894,894,488,488,488,488,488',
'488,488,488,,488,488,,,,,,488,488,,894,,,894,,,894,894,,,894,,894,488',
',488,894,488,488,,488,488,488,488,488,894,488,,,,894,894,894,894,,894',
'894,894,894,,,,,894,894,,,,,,,894,,894,894,894,,,,894,894,894,900,900',
'900,900,900,900,,,,900,900,,,,900,,900,900,900,900,900,900,900,,,,,',
'900,900,900,900,900,900,900,,,900,,,,,,900,900,900,900,900,900,900,900',
'900,900,900,900,,900,900,900,,900,900,900,900,900,490,,,,,,,,,,,,,,',
',490,490,,900,,,900,,,900,900,,,900,,900,490,,490,900,490,490,,490,490',
',,490,900,490,,,,900,900,900,900,,900,900,900,900,,,,,900,900,,,,,,',
'900,,900,900,900,,,,900,900,900,901,901,901,901,901,901,,,,901,901,',
',,901,,901,901,901,901,901,901,901,,,,,,901,901,901,901,901,901,901',
',,901,,,,,,901,901,901,901,901,901,901,901,901,901,901,901,,901,901',
'901,,901,901,901,901,901,535,,,,,,,,,,,,,,,,535,535,,901,,,901,,,901',
'901,,,901,,901,535,,535,901,535,535,,535,535,,,535,901,535,,,,901,901',
'901,901,,901,901,901,901,,,,,901,901,,,,,,,901,,901,901,901,,,,901,901',
'901,988,988,988,988,988,988,,,,988,988,,,,988,,988,988,988,988,988,988',
'988,,,,,,988,988,988,988,988,988,988,,,988,,,,,,988,988,988,988,988',
'988,988,988,988,988,988,988,,988,988,988,,988,988,988,988,988,476,,',
',,,,,,,,,,,,,476,476,,988,,,988,,,988,988,,,988,,988,476,,476,988,476',
'476,,476,476,,,,988,,,,,988,988,988,988,,988,988,988,988,,,,,988,988',
',,,,,,988,,988,988,988,,,,988,988,988,1009,1009,1009,1009,1009,1009',
',,,1009,1009,,,,1009,,1009,1009,1009,1009,1009,1009,1009,,,,,,1009,1009',
'1009,1009,1009,1009,1009,,,1009,,,,,,1009,1009,1009,1009,1009,1009,1009',
'1009,1009,1009,1009,1009,,1009,1009,1009,,1009,1009,1009,1009,1009,477',
',,,,,,,,,,,,,,,477,477,,1009,,,1009,,,1009,1009,,,1009,,1009,477,,477',
'1009,477,477,,477,477,,,,1009,,,,,1009,1009,1009,1009,,1009,1009,1009',
'1009,,,,,1009,1009,,,,,,,1009,,1009,1009,1009,,,,1009,1009,1009,1047',
'1047,1047,1047,1047,1047,,,,1047,1047,,,,1047,,1047,1047,1047,1047,1047',
'1047,1047,,,,,,1047,1047,1047,1047,1047,1047,1047,,,1047,,,,,,1047,1047',
'1047,1047,1047,1047,1047,1047,1047,1047,1047,1047,,1047,1047,1047,,1047',
'1047,1047,1047,1047,478,,,,,,,,,,,,,,,,478,478,,1047,,,1047,,,1047,1047',
',,1047,,1047,478,,,1047,478,478,,478,478,,,,1047,,,,,1047,1047,1047',
'1047,,1047,1047,1047,1047,,,,,1047,1047,,,,,,,1047,,1047,1047,1047,',
',,1047,1047,1047,1078,1078,1078,1078,1078,1078,,,,1078,1078,,,,1078',
',1078,1078,1078,1078,1078,1078,1078,,,,,,1078,1078,1078,1078,1078,1078',
'1078,,,1078,,,,,,1078,1078,1078,1078,1078,1078,1078,1078,1078,1078,1078',
'1078,,1078,1078,1078,,1078,1078,1078,1078,1078,,,,,,,,,,,,,,,,,,,,1078',
',,1078,,,1078,1078,,,1078,,1078,,,,1078,,,,,,,,,1078,,,,,1078,1078,1078',
'1078,,1078,1078,1078,1078,,,,,1078,1078,,,,,,,1078,,1078,1078,1078,',
',,1078,1078,1078,5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5',
'5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,,,',
',,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,,5,5,5,5,,,,,5,5',
',,,,,,5,,5,5,5,,,,5,5,5,20,20,20,,20,,,,20,20,,,,20,,20,20,20,20,20',
'20,20,,,,,,20,20,20,20,20,20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20',
'20,,20,20,20,,20,20,20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20',
',,,,,20,,,,,,,,,20,,,,,20,20,20,20,,20,20,20,20,,,,,20,20,,,,,,,20,',
'20,20,20,,,,20,20,20,29,29,29,,29,,,,29,29,,,,29,,29,29,29,29,29,29',
'29,,,,,,29,29,29,29,29,29,29,,,29,,,,,,,29,,,29,29,29,29,29,29,29,29',
'29,29,29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29,,,29,29,,,29',
',29,,29,,29,,,29,,,,,,29,,,,,29,29,29,29,,29,29,29,29,,,,,29,29,,,,',
',,29,,29,29,29,,,,29,29,29,30,30,30,,30,,,,30,30,,,,30,,30,30,30,30',
'30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,,30,,,30,30,30,30,30,30',
'30,30,30,30,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30',
',,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30,30,30,,30,30,30,30,,,,,30,30',
',,,,,,30,,30,30,30,,,,30,30,30,31,31,31,,31,,,,31,31,,,,31,,31,31,31',
'31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31,,,,,,,31,,,31,31,31,31,31',
'31,31,31,31,31,31,31,,31,31,31,31,31,,,,,,,,,,,,,,,,,,,,31,,,31,,,31',
'31,,,31,,31,,31,,31,,,31,,,,,,31,,,,,31,31,31,31,,31,31,31,31,,,,,31',
'31,,,,,,,31,,31,31,31,,,,31,31,31,34,34,34,,34,,,,34,34,,,,34,,34,34',
'34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34',
'34,34,34,34,,34,34,34,,34,34,,,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34',
',,34,,34,,,,,,,,,,,,,,,,,,34,34,34,34,,34,34,34,34,,,,,34,34,,,,,,,34',
',34,34,34,35,35,35,,35,34,,,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35',
'35,35,35,35,35,35,,,35,,,,,,,35,,,35,35,35,35,35,35,35,35,,35,35,35',
',35,35,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35,,,35,,,,,,,,,,,,,,,,',
',,,35,35,35,35,,35,35,35,35,,,,,35,35,,,,35,,,35,,35,35,35,41,41,41',
',41,35,,,41,41,,,,41,,41,41,41,41,41,41,41,,,,,,41,41,41,41,41,41,41',
',,41,,,,,,,41,,,41,41,41,41,41,41,41,41,,41,41,41,,41,41,41,41,41,,',
',,,,,,,,,,,,,,,,,41,,,41,,,41,41,,,41,,,,,,41,,,,,,,,,41,,,,,41,41,41',
'41,,41,41,41,41,,,,,41,41,,,,,,,41,,41,41,41,,,,41,41,41,42,42,42,,42',
',,,42,42,,,,42,,42,42,42,42,42,42,42,,,,,,42,42,42,42,42,42,42,,,42',
',,,,,,42,,,42,42,42,42,42,42,42,42,,42,42,42,,42,42,42,42,42,,,,,,,',
',,,,,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,,42,,,,,42,42,42,42',
',42,42,42,42,,,,,42,42,,,,,,,42,,42,42,42,,,,42,42,42,44,44,44,,44,',
',,44,44,,,,44,,44,44,44,44,44,44,44,,,,,,44,44,44,44,44,44,44,,,44,',
',,,,,44,,,44,44,44,44,44,44,44,44,,44,44,44,,44,44,44,44,44,,,,,,,,',
',,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44,,,,,,,,,44,,,,,44,44,44,44,',
'44,44,44,44,,,,,44,44,,,,,,,44,,44,44,44,,,,44,44,44,45,45,45,,45,,',
',45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,',
',,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,45,45,45,,,,,,,,,',
',,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,,45,,,,,45,45,45,45,,45',
'45,45,45,,,,,45,45,,,,,,,45,,45,45,45,,,,45,45,45,47,47,47,,47,,,,47',
'47,,,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,',
'47,,,47,47,47,47,47,47,47,47,,47,47,47,,47,47,47,47,47,,,,,,,,,,,,,',
',,,,,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,,47,,,,,47,47,47,47,,47,47',
'47,47,,,,,47,47,,,,,,,47,,47,47,47,,,,47,47,47,61,61,61,61,61,,,,61',
'61,,,,61,,61,61,61,61,61,61,61,,,,,,61,61,61,61,61,61,61,,,61,,,,,,61',
'61,,61,61,61,61,61,61,61,61,61,,61,61,61,,61,61,61,61,61,,,,,,,,,,,',
',,,,,,,,61,,,61,,,61,61,,,61,,61,,,,61,,,,,,,,,61,,,,,61,61,61,61,,61',
'61,61,61,,,,,61,61,,,,,,,61,,61,61,61,,,,61,61,61,62,62,62,,62,,,,62',
'62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62,62,,,62,,,,,,',
'62,,,62,62,62,62,62,62,62,62,62,62,62,62,,62,62,62,62,62,,,,,,,,,,,',
',,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,62,,,,,,62,,,,,62,62,62,62',
',62,62,62,62,,,,,62,62,,,,,,,62,,62,62,62,,,,62,62,62,63,63,63,,63,',
',,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,',
',,,,,63,,,63,63,63,63,63,63,63,63,63,63,63,63,,63,63,63,63,63,,,,,,',
',,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,63,,,,,,63,,,,,63,63,63',
'63,,63,63,63,63,,,,,63,63,,,,,,,63,,63,63,63,,,,63,63,63,66,66,66,,66',
',,,66,66,,,,66,,66,66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66',
',,,,,,66,,,66,66,66,66,66,66,66,66,,66,66,66,,66,66,66,66,66,,,,,,,',
',,,,,,,,,,,,66,,,66,,,66,66,,,66,,,,,,66,,,,,,,,,66,,,,,66,66,66,66',
',66,66,66,66,,,,,66,66,,,,,,,66,,66,66,66,,,,66,66,66,67,67,67,,67,',
',,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,',
',,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67,67,67,67,,,,,,,,',
',,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,,67,,,,,67,67,67,67,',
'67,67,67,67,,,,,67,67,,,,,,,67,,67,67,67,,,,67,67,67,70,70,70,,70,,',
',70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,',
',,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,70,70,70,,,,,,,,,',
',,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,70,,,,,,,,,70,,,,,70,70,70,70,,70',
'70,70,70,,,,,70,70,70,,,,,70,70,,70,70,70,,,,70,70,70,71,71,71,,71,',
',,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71,',
',,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,,71,,,,,,,,,,,,',
',,,,,,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,,,,,,,,71,71,71,71,,71,71',
'71,71,,,,,71,71,,,,,,,71,,71,71,71,72,72,72,,72,71,,,72,72,,,,72,,72',
'72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72,,,72,72,72',
'72,72,72,72,72,,72,72,72,,72,72,,,72,,,,,,,,,,,,,,,,,72,,,72,,,72,,',
'72,72,,,72,,,,,,,,,,,,,,,,,,,,72,72,72,72,,72,72,72,72,,,,,72,72,,,',
',,,72,,72,72,72,73,73,73,,73,72,,,73,73,,,,73,,73,73,73,73,73,73,73',
',,,,,73,73,73,73,73,73,73,,,73,,,,,,,73,,,73,73,73,73,73,73,73,73,,73',
'73,73,,73,73,,,73,,,,,,,,,,,,,,,,,,,,73,,,73,,,73,73,,,73,,,,,,,,,,',
',,,,,,,,,73,73,73,73,,73,73,73,73,,,,,73,73,,,,,,,73,,73,73,73,,,,,',
'73,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74',
'74,74,,,,74,74,74,74,74,74,74,74,74,74,,,,,,74,74,74,74,74,74,74,74',
'74,74,74,74,,74,,,,,,74,74,,74,74,74,74,74,74,74,,,74,74,,,,74,74,74',
'74,,,,,,74,,,,,,,,74,74,,74,74,74,74,74,74,74,74,74,74,74,74,,,74,,',
',,,117,117,117,117,117,,,,117,117,,,,117,,117,117,117,117,117,117,117',
',,,,74,117,117,117,117,117,117,117,,,117,,,,,,117,117,117,117,117,117',
'117,117,117,117,117,117,,117,117,117,,117,117,117,117,117,,,,,,,,,,',
',,,,,,,,,117,,,117,,,117,117,,,117,,117,,,,117,,,,,,,,,117,,,,,117,117',
'117,117,,117,117,117,117,,,,,117,117,,,,,,117,117,,117,117,117,,,,117',
'117,117,122,122,122,,122,,,,122,122,,,,122,,122,122,122,122,122,122',
'122,,,,,,122,122,122,122,122,122,122,,,122,,,,,,,122,,,122,122,122,122',
'122,122,122,122,,122,122,122,,122,122,122,122,122,,,,,,,,,,,,,,,,,,',
',122,,,122,,,122,122,,,122,,,,,,122,,,,,,,,,122,,,,,122,122,122,122',
',122,122,122,122,,,,,122,122,,,,,,,122,,122,122,122,,,,122,122,122,123',
'123,123,,123,,,,123,123,,,,123,,123,123,123,123,123,123,123,,,,,,123',
'123,123,123,123,123,123,,,123,,,,,,,123,,,123,123,123,123,123,123,123',
'123,,123,123,123,,123,123,123,123,123,,,,,,,,,,,,,,,,,,,,123,,,123,',
',123,123,,,123,,,,,,123,,,,,,,,,123,,,,,123,123,123,123,,123,123,123',
'123,,,,,123,123,,,,,,,123,,123,123,123,,,,123,123,123,124,124,124,,124',
',,,124,124,,,,124,,124,124,124,124,124,124,124,,,,,,124,124,124,124',
'124,124,124,,,124,,,,,,,124,,,124,124,124,124,124,124,124,124,,124,124',
'124,,124,124,124,124,124,,,,,,,,,,,,,,,,,,,,124,,,124,,,124,124,,,124',
',,,,,124,,,,,,,,,124,,,,,124,124,124,124,,124,124,124,124,,,,,124,124',
',,,,,,124,,124,124,124,,,,124,124,124,125,125,125,,125,,,,125,125,,',
',125,,125,125,125,125,125,125,125,,,,,,125,125,125,125,125,125,125,',
',125,,,,,,,125,,,125,125,125,125,125,125,125,125,,125,125,125,,125,125',
'125,125,125,,,,,,,,,,,,,,,,,,,,125,,,125,,,125,125,,,125,,,,,,125,,',
',,,,,,125,,,,,125,125,125,125,,125,125,125,125,,,,,125,125,,,,,,,125',
',125,125,125,,,,125,125,125,126,126,126,126,126,,,,126,126,,,,126,,126',
'126,126,126,126,126,126,,,,,,126,126,126,126,126,126,126,,,126,,,,,',
'126,126,,126,126,126,126,126,126,126,126,126,,126,126,126,,126,126,126',
'126,126,,,,,,,,,,,,,,,,,,,,126,,,126,,,126,126,,,126,,126,,,,126,,,',
',,,,,126,,,,,126,126,126,126,,126,126,126,126,,,,,126,126,,,,,,,126',
',126,126,126,,,,126,126,126,212,212,212,,212,,,,212,212,,,,212,,212',
'212,212,212,212,212,212,,,,,,212,212,212,212,212,212,212,,,212,,,,,',
',212,,,212,212,212,212,212,212,212,212,,212,212,212,,212,212,212,212',
'212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212,,,212,,212,,,,212,,,,,,,',
',212,,,,,212,212,212,212,,212,212,212,212,,,,,212,212,,,,,,,212,,212',
'212,212,,,,212,212,212,213,213,213,,213,,,,213,213,,,,213,,213,213,213',
'213,213,213,213,,,,,,213,213,213,213,213,213,213,,,213,,,,,,,213,,,213',
'213,213,213,213,213,213,213,,213,213,213,,213,213,213,213,213,,,,,,',
',,,,,,,,,,,,,213,,,213,,,213,213,,,213,,213,,,,213,,,,,,,,,213,,,,,213',
'213,213,213,,213,213,213,213,,,,,213,213,,,,,,,213,,213,213,213,,,,213',
'213,213,214,214,214,,214,,,,214,214,,,,214,,214,214,214,214,214,214',
'214,,,,,,214,214,214,214,214,214,214,,,214,,,,,,,214,,,214,214,214,214',
'214,214,214,214,,214,214,214,,214,214,214,214,214,,,,,,,,,,,,,,,,,,',
',214,,,214,,,214,214,,,214,,,,,,214,,,,,,,,,214,,,,,214,214,214,214',
',214,214,214,214,,,,,214,214,,,,,,,214,,214,214,214,,,,214,214,214,215',
'215,215,,215,,,,215,215,,,,215,,215,215,215,215,215,215,215,,,,,,215',
'215,215,215,215,215,215,,,215,,,,,,,215,,,215,215,215,215,215,215,215',
'215,,215,215,215,,215,215,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,',
',215,215,,,215,,,,,,215,,,,,,,,,215,,,,,215,215,215,215,,215,215,215',
'215,,,,,215,215,,,,,,,215,,215,215,215,,,,215,215,215,216,216,216,,216',
',,,216,216,,,,216,,216,216,216,216,216,216,216,,,,,,216,216,216,216',
'216,216,216,,,216,,,,,,,216,,,216,216,216,216,216,216,216,216,,216,216',
'216,,216,216,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216',
',,,,,216,,,,,,,,,216,,,,,216,216,216,216,,216,216,216,216,,,,,216,216',
',,,,,,216,,216,216,216,,,,216,216,216,217,217,217,,217,,,,217,217,,',
',217,,217,217,217,217,217,217,217,,,,,,217,217,217,217,217,217,217,',
',217,,,,,,,217,,,217,217,217,217,217,217,217,217,217,217,217,217,,217',
'217,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,217,,217',
',217,,,217,,,,,,217,,,,,217,217,217,217,,217,217,217,217,,,,,217,217',
',,,,,,217,,217,217,217,,,,217,217,217,223,223,223,,223,,,,223,223,,',
',223,,223,223,223,223,223,223,223,,,,,,223,223,223,223,223,223,223,',
',223,,,,,,,223,,,223,223,223,223,223,223,223,223,,223,223,223,,223,223',
'223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,,,,,223,,',
',,,,,,223,,,,,223,223,223,223,,223,223,223,223,,,,,223,223,,,,,,,223',
',223,223,223,,,,223,223,223,224,224,224,,224,,,,224,224,,,,224,,224',
'224,224,224,224,224,224,,,,,,224,224,224,224,224,224,224,,,224,,,,,',
',224,,,224,224,224,224,224,224,224,224,,224,224,224,,224,224,224,224',
'224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,,,,,224,,,,,,,,,224',
',,,,224,224,224,224,,224,224,224,224,,,,,224,224,,,,,,,224,,224,224',
'224,,,,224,224,224,225,225,225,,225,,,,225,225,,,,225,,225,225,225,225',
'225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225',
'225,225,225,225,225,225,,225,225,225,,225,225,225,225,225,,,,,,,,,,',
',,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,,225,,,,,225,225',
'225,225,,225,225,225,225,,,,,225,225,225,,,,,,225,,225,225,225,,,,225',
'225,225,236,236,236,,236,,,,236,236,,,,236,,236,236,236,236,236,236',
'236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236',
'236,236,236,236,,236,236,236,,236,236,236,236,236,,,,,,,,,,,,,,,,,,',
',236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,,236,,,,,236,236,236,236',
',236,236,236,236,,,,,236,236,,,,,,,236,,236,236,236,,,,236,236,236,239',
'239,239,,239,,,,239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239',
'239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239',
'239,,239,239,239,,239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,',
',239,239,,,239,,,,,,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239',
'239,,,,,239,239,,,,,,,239,,239,239,239,,,,239,239,239,240,240,240,,240',
',,,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240,240,240',
'240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240',
'240,,240,240,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240',
',,,,,240,,,,,,,,,240,,,,,240,240,240,240,,240,240,240,240,,,,,240,240',
',,,,,,240,,240,240,240,,,,240,240,240,241,241,241,,241,,,,241,241,,',
',241,,241,241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,',
',241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241',
'241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,',
',,,,,,241,,,,,241,241,241,241,,241,241,241,241,,,,,241,241,,,,,,,241',
',241,241,241,,,,241,241,241,242,242,242,,242,,,,242,242,,,,242,,242',
'242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,',
',242,,,242,242,242,242,242,242,242,242,,242,242,242,,242,242,242,242',
'242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242',
',,,,242,242,242,242,,242,242,242,242,,,,,242,242,,,,,,,242,,242,242',
'242,,,,242,242,242,243,243,243,,243,,,,243,243,,,,243,,243,243,243,243',
'243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243',
'243,243,243,243,243,243,,243,243,243,,243,243,243,243,243,,,,,,,,,,',
',,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,,243,,,,,243,243',
'243,243,,243,243,243,243,,,,,243,243,,,,,,,243,,243,243,243,,,,243,243',
'243,244,244,244,,244,,,,244,244,,,,244,,244,244,244,244,244,244,244',
',,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244',
'244,244,244,,244,244,244,,244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244',
',,244,,,244,244,,,244,,,,,,244,,,,,,,,,244,,,,,244,244,244,244,,244',
'244,244,244,,,,,244,244,,,,,,,244,,244,244,244,,,,244,244,244,245,245',
'245,,245,,,,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245',
'245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245',
',245,245,245,,245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245',
'245,,,245,,,,,,245,,,,,,,,,245,,,,,245,245,245,245,,245,245,245,245',
',,,,245,245,,,,,,,245,,245,245,245,,,,245,245,245,246,246,246,,246,',
',,246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246,246,246,246',
'246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246',
',246,246,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,',
',,,246,,,,,,,,,246,,,,,246,246,246,246,,246,246,246,246,,,,,246,246',
',,,,,,246,,246,246,246,,,,246,246,246,247,247,247,,247,,,,247,247,,',
',247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247,',
',247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247,,247,247',
'247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,',
',,,,,,247,,,,,247,247,247,247,,247,247,247,247,,,,,247,247,,,,,,,247',
',247,247,247,,,,247,247,247,248,248,248,,248,,,,248,248,,,,248,,248',
'248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,',
',248,,,248,248,248,248,248,248,248,248,,248,248,248,,248,248,248,248',
'248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,,248',
',,,,248,248,248,248,,248,248,248,248,,,,,248,248,,,,,,,248,,248,248',
'248,,,,248,248,248,249,249,249,,249,,,,249,249,,,,249,,249,249,249,249',
'249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249',
'249,249,249,249,249,249,,249,249,249,,249,249,249,249,249,,,,,,,,,,',
',,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,,249,,,,,249,249',
'249,249,,249,249,249,249,,,,,249,249,,,,,,,249,,249,249,249,,,,249,249',
'249,250,250,250,,250,,,,250,250,,,,250,,250,250,250,250,250,250,250',
',,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250',
'250,250,250,,250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,,,,,,,250',
',,250,,,250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250,250,,250',
'250,250,250,,,,,250,250,,,,,,,250,,250,250,250,,,,250,250,250,251,251',
'251,,251,,,,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251',
'251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251',
',251,251,251,,251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251',
'251,,,251,,,,,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251,251',
',,,,251,251,,,,,,,251,,251,251,251,,,,251,251,251,252,252,252,,252,',
',,252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252,252,252,252,252',
'252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252,252,252',
',252,252,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,',
',,,252,,,,,,,,,252,,,,,252,252,252,252,,252,252,252,252,,,,,252,252',
',,,,,,252,,252,252,252,,,,252,252,252,253,253,253,,253,,,,253,253,,',
',253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253,253,',
',253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253,,253,253',
'253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,',
',,,,,,253,,,,,253,253,253,253,,253,253,253,253,,,,,253,253,,,,,,,253',
',253,253,253,,,,253,253,253,254,254,254,,254,,,,254,254,,,,254,,254',
'254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,',
',254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254,254,254',
'254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254',
',,,,254,254,254,254,,254,254,254,254,,,,,254,254,,,,,,,254,,254,254',
'254,,,,254,254,254,255,255,255,,255,,,,255,255,,,,255,,255,255,255,255',
'255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255',
'255,255,255,255,255,255,,255,255,255,,255,255,255,255,255,,,,,,,,,,',
',,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,,255,,,,,255,255',
'255,255,,255,255,255,255,,,,,255,255,,,,,,,255,,255,255,255,,,,255,255',
'255,256,256,256,,256,,,,256,256,,,,256,,256,256,256,256,256,256,256',
',,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256',
'256,256,256,,256,256,256,,256,256,256,256,256,,,,,,,,,,,,,,,,,,,,256',
',,256,,,256,256,,,256,,,,,,256,,,,,,,,,256,,,,,256,256,256,256,,256',
'256,256,256,,,,,256,256,,,,,,,256,,256,256,256,,,,256,256,256,257,257',
'257,,257,,,,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257',
'257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257',
',257,257,257,,257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257',
'257,,,257,,,,,,257,,,,,,,,,257,,,,,257,257,257,257,,257,257,257,257',
',,,,257,257,,,,,,,257,,257,257,257,,,,257,257,257,258,258,258,,258,',
',,258,258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258',
'258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258',
',258,258,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,',
',,,258,,,,,,,,,258,,,,,258,258,258,258,,258,258,258,258,,,,,258,258',
',,,,,,258,,258,258,258,,,,258,258,258,259,259,259,,259,,,,259,259,,',
',259,,259,259,259,259,259,259,259,,,,,,259,259,259,259,259,259,259,',
',259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259,259,259,,259,259',
'259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,',
',,,,,,259,,,,,259,259,259,259,,259,259,259,259,,,,,259,259,,,,,,,259',
',259,259,259,,,,259,259,259,260,260,260,,260,,,,260,260,,,,260,,260',
'260,260,260,260,260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,',
',260,,,260,260,260,260,260,260,260,260,,260,260,260,,260,260,260,260',
'260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,,260',
',,,,260,260,260,260,,260,260,260,260,,,,,260,260,,,,,,,260,,260,260',
'260,,,,260,260,260,265,265,265,,265,,,,265,265,,,,265,,265,265,265,265',
'265,265,265,,,,,,265,265,265,265,265,265,265,,,265,,,,,,,265,,,265,265',
'265,265,265,265,265,265,,265,265,265,,265,265,265,265,265,,,,,,,,,,',
',,,,,,,,,265,,,265,,,265,265,,,265,,,,,,265,,,,,,,,,265,,,,,265,265',
'265,265,,265,265,265,265,,,,,265,265,,,,,,,265,,265,265,265,,,,265,265',
'265,272,272,272,,272,,,,272,272,,,,272,,272,272,272,272,272,272,272',
',,,,,272,272,272,272,272,272,272,,,272,,,,,,,272,,,272,272,272,272,272',
'272,272,272,272,272,272,272,,272,272,272,272,272,,,,,,,,,,,,,,,,,,,',
'272,,,272,,,272,272,,,272,,272,,272,,272,,,272,,,,,,272,,,,,272,272',
'272,272,,272,272,272,272,,,,,272,272,,,,,,,272,,272,272,272,,,,272,272',
'272,273,273,273,,273,,,,273,273,,,,273,,273,273,273,273,273,273,273',
',,,,,273,273,273,273,273,273,273,,,273,,,,,,,273,,,273,273,273,273,273',
'273,273,273,273,273,273,273,,273,273,273,273,273,,,,,,,,,,,,,,,,,,,',
'273,,,273,,,273,273,,,273,,273,,273,,273,,,273,,,,,,273,,,,,273,273',
'273,273,,273,273,273,273,,,,,273,273,,,,,,,273,,273,273,273,,,,273,273',
'273,281,281,281,,281,,,,281,281,,,,281,,281,281,281,281,281,281,281',
',,,,,281,281,281,281,281,281,281,,,281,,,,,,,281,,,281,281,281,281,281',
'281,281,281,281,281,281,281,,281,281,281,281,281,,,,,,,,,,,,,,,,,,,',
'281,,,281,,,281,281,,,281,,281,,281,,281,,,281,,,,,,281,,,,,281,281',
'281,281,,281,281,281,281,,,,,281,281,281,,,,,,281,,281,281,281,,,,281',
'281,281,288,288,288,,288,,,,288,288,,,,288,,288,288,288,288,288,288',
'288,,,,,,288,288,288,288,288,288,288,,,288,,,,,,,288,,,288,288,288,288',
'288,288,288,288,,288,288,288,,288,288,288,288,288,,,,,,,,,,,,,,,,,,',
',288,,,288,,,288,288,,,288,,,,,,288,,,,,,,,,288,,,,,288,288,288,288',
',288,288,288,288,,,,,288,288,,,,,,,288,,288,288,288,,,,288,288,288,290',
'290,290,,290,,,,290,290,,,,290,,290,290,290,290,290,290,290,,,,,,290',
'290,290,290,290,290,290,,,290,,,,,,,290,,,290,290,290,290,290,290,290',
'290,,290,290,290,,290,290,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,',
',290,290,,,290,,,,,,290,,,,,,,,,290,,,,,290,290,290,290,,290,290,290',
'290,,,,,290,290,,,,,,,290,,290,290,290,,,,290,290,290,293,293,293,,293',
',,,293,293,,,,293,,293,293,293,293,293,293,293,,,,,,293,293,293,293',
'293,293,293,,,293,,,,,,,293,,,293,293,293,293,293,293,293,293,,293,293',
'293,,293,293,293,293,293,,,,,,,,,,,,,,,,,,,,293,,,293,,,293,293,,,293',
',,,,,293,,,,,,,,,293,,,,,293,293,293,293,,293,293,293,293,,,,,293,293',
',,,,,,293,,293,293,293,,,,293,293,293,294,294,294,,294,,,,294,294,,',
',294,,294,294,294,294,294,294,294,,,,,,294,294,294,294,294,294,294,',
',294,,,,,,,294,,,294,294,294,294,294,294,294,294,,294,294,294,,294,294',
'294,294,294,,,,,,,,,,,,,,,,,,,,294,,,294,,,294,294,,,294,,,,,,294,,',
',,,,,,294,,,,,294,294,294,294,,294,294,294,294,,,,,294,294,,,,,,,294',
',294,294,294,,,,294,294,294,299,299,299,299,299,,,,299,299,,,,299,,299',
'299,299,299,299,299,299,,,,,,299,299,299,299,299,299,299,,,299,,,,,',
'299,299,,299,299,299,299,299,299,299,299,299,,299,299,299,,299,299,299',
'299,299,,,,,,,,,,,,,,,,,,,,299,,,299,,,299,299,,,299,,299,,,,299,,,',
',,,,,299,,,,,299,299,299,299,,299,299,299,299,,,,,299,299,,,,,,,299',
',299,299,299,,,,299,299,299,307,307,307,,307,,,,307,307,,,,307,,307',
'307,307,307,307,307,307,,,,,,307,307,307,307,307,307,307,,,307,,,,,',
',307,,,307,307,307,307,307,307,307,307,,307,307,307,,307,307,,,307,',
',,,,,,,,,,,,,,,,,,307,,,307,,,307,307,,,307,,,,,,,,,,,,,,,,,,,,307,307',
'307,307,,307,307,307,307,,,,,307,307,,,,307,,,307,,307,307,307,324,324',
'324,,324,307,,,324,324,,,,324,,324,324,324,324,324,324,324,,,,,,324',
'324,324,324,324,324,324,,,324,,,,,,,324,,,324,324,324,324,324,324,324',
'324,,324,324,324,,324,324,,,324,,,,,,,,,,,,,,,,,,,,324,,,324,,,324,324',
',,324,,,,,,,,,,,,,,,,,,,,324,324,324,324,,324,324,324,324,,,,,324,324',
',,,,,,324,,324,324,324,333,333,333,,333,324,,,333,333,,,,333,,333,333',
'333,333,333,333,333,,,,,,333,333,333,333,333,333,333,,,333,,,,,,,333',
',,333,333,333,333,333,333,333,333,,333,333,333,,333,333,333,333,333',
',,,,,,,,,,,,,,,,,,,333,,,333,,,333,333,,,333,,,,,,333,,,,,,,,,333,,',
',,333,333,333,333,,333,333,333,333,,,,,333,333,,,,,,,333,,333,333,333',
',,,333,333,333,335,335,335,,335,,,,335,335,,,,335,,335,335,335,335,335',
'335,335,,,,,,335,335,335,335,335,335,335,,,335,,,,,,,335,,,335,335,335',
'335,335,335,335,335,,335,335,335,,335,335,335,335,335,,,,,,,,,,,,,,',
',,,,,335,,,335,335,,335,335,,,335,,,,,,335,,,,,,,,,335,,,,,335,335,335',
'335,,335,335,335,335,,,,,335,335,,,,,,,335,,335,335,335,,,,335,335,335',
'352,352,352,,352,,,,352,352,,,,352,,352,352,352,352,352,352,352,,,,',
',352,352,352,352,352,352,352,,,352,,,,,,,352,,,352,352,352,352,352,352',
'352,352,,352,352,352,,352,352,352,352,352,,,,,,,,,,,,,,,,,,,,352,,,352',
',,352,352,,,352,,,,,,352,,,,,,,,,352,,,,,352,352,352,352,,352,352,352',
'352,,,,,352,352,,,,,,,352,,352,352,352,,,,352,352,352,373,373,373,,373',
',,,373,373,,,,373,,373,373,373,373,373,373,373,,,,,,373,373,373,373',
'373,373,373,,,373,,,,,,,373,,,373,373,373,373,373,373,373,373,,373,373',
'373,,373,373,373,373,373,,,,,,,,,,,,,,,,,,,,373,,,373,,,373,373,,,373',
',,,,,373,,,,,,,,,373,,,,,373,373,373,373,,373,373,373,373,,,,,373,373',
',,,,,,373,,373,373,373,,,,373,373,373,389,389,389,,389,,,,389,389,,',
',389,,389,389,389,389,389,389,389,,,,,,389,389,389,389,389,389,389,',
',389,,,,,,,389,,,389,389,389,389,389,389,389,389,,389,389,389,,389,389',
'389,389,389,,,,,,,,,,,,,,,,,,,,389,,,389,,,389,389,,,389,,,,,,389,,',
',,,,,,389,,,,,389,389,389,389,,389,389,389,389,,,,,389,389,,,,,,,389',
',389,389,389,,,,389,389,389,417,417,417,,417,,,,417,417,,,,417,,417',
'417,417,417,417,417,417,,,,,,417,417,417,417,417,417,417,,,417,,,,,',
',417,,,417,417,417,417,417,417,417,417,,417,417,417,,417,417,417,417',
'417,,,,,,,,,,,,,,,,,,,,417,,,417,,,417,417,,,417,,,,,,417,,,,,,,,,417',
',,,,417,417,417,417,,417,417,417,417,,,,,417,417,,,,,,,417,,417,417',
'417,,,,417,417,417,463,463,463,,463,,,,463,463,,,,463,,463,463,463,463',
'463,463,463,,,,,,463,463,463,463,463,463,463,,,463,,,,,,,463,,,463,463',
'463,463,463,463,463,463,463,463,463,463,,463,463,463,463,463,,,,,,,',
',,,,,,,,,,,,463,,,463,,,463,463,,,463,,463,,463,,463,,,463,,,,,,463',
',,,,463,463,463,463,,463,463,463,463,,,,,463,463,,,,,,,463,,463,463',
'463,,,,463,463,463,465,465,465,,465,,,,465,465,,,,465,,465,465,465,465',
'465,465,465,,,,,,465,465,465,465,465,465,465,,,465,,,,,,,465,,,465,465',
'465,465,465,465,465,465,,465,465,465,,465,465,465,465,465,,,,,,,,,,',
',,,,,,,,,465,,,465,,,465,465,,,465,,,,,,465,,,,,,,,,465,,,,,465,465',
'465,465,,465,465,465,465,,,,,465,465,,,,,,,465,,465,465,465,,,,465,465',
'465,466,466,466,,466,,,,466,466,,,,466,,466,466,466,466,466,466,466',
',,,,,466,466,466,466,466,466,466,,,466,,,,,,,466,,,466,466,466,466,466',
'466,466,466,,466,466,466,,466,466,466,466,466,,,,,,,,,,,,,,,,,,,,466',
',,466,,,466,466,,,466,,,,,,466,,,,,,,,,466,,,,,466,466,466,466,,466',
'466,466,466,,,,,466,466,,,,,,,466,,466,466,466,,,,466,466,466,467,467',
'467,,467,,,,467,467,,,,467,,467,467,467,467,467,467,467,,,,,,467,467',
'467,467,467,467,467,,,467,,,,,,,467,,,467,467,467,467,467,467,467,467',
',467,467,467,,467,467,467,467,467,,,,,,,,,,,,,,,,,,,,467,,,467,,,467',
'467,,,467,,,,,,467,,,,,,,,,467,,,,,467,467,467,467,,467,467,467,467',
',,,,467,467,,,,,,,467,,467,467,467,,,,467,467,467,502,502,502,,502,',
',,502,502,,,,502,,502,502,502,502,502,502,502,,,,,,502,502,502,502,502',
'502,502,,,502,,,,,,,502,,,502,502,502,502,502,502,502,502,502,502,502',
'502,,502,502,502,502,502,,,,,,,,,,,,,,,,,,,,502,,,502,,,502,502,,,502',
',502,,502,,502,,,502,,,,,,502,,,,,502,502,502,502,,502,502,502,502,',
',,,502,502,,,,,,,502,,502,502,502,,,,502,502,502,504,504,504,,504,,',
',504,504,,,,504,,504,504,504,504,504,504,504,,,,,,504,504,504,504,504',
'504,504,,,504,,,,,,,504,,,504,504,504,504,504,504,504,504,504,504,504',
'504,,504,504,504,504,504,,,,,,,,,,,,,,,,,,,,504,,,504,,,504,504,,,504',
',,,504,,504,,,504,,,,,,504,,,,,504,504,504,504,,504,504,504,504,,,,',
'504,504,,,,,,,504,,504,504,504,,,,504,504,504,506,506,506,,506,,,,506',
'506,,,,506,,506,506,506,506,506,506,506,,,,,,506,506,506,506,506,506',
'506,,,506,,,,,,,506,,,506,506,506,506,506,506,506,506,,506,506,506,',
'506,506,506,506,506,,,,,,,,,,,,,,,,,,,,506,,,506,,,506,506,,,506,,,',
',,506,,,,,,,,,506,,,,,506,506,506,506,,506,506,506,506,,,,,506,506,',
',,,,,506,,506,506,506,,,,506,506,506,512,512,512,512,512,,,,512,512',
',,,512,,512,512,512,512,512,512,512,,,,,,512,512,512,512,512,512,512',
',,512,,,,,,512,512,512,512,512,512,512,512,512,512,512,512,,512,512',
'512,,512,512,512,512,512,,,,,,,,,,,,,,,,,,,,512,,,512,,,512,512,,,512',
',512,,,,512,,,,,,,,,512,,,,,512,512,512,512,,512,512,512,512,,,,,512',
'512,,,,,,512,512,,512,512,512,,,,512,512,512,520,520,520,,520,,,,520',
'520,,,,520,,520,520,520,520,520,520,520,,,,,,520,520,520,520,520,520',
'520,,,520,,,,,,,520,,,520,520,520,520,520,520,520,520,,520,520,520,',
'520,520,,,520,,,,,,,,,,,,,,,,,,,,520,,,520,,,520,520,,,520,,,,,,,,,',
',,,,,,,,,,520,520,520,520,,520,520,520,520,,,,,520,520,,,,,,,520,,520',
'520,520,522,522,522,,522,520,,,522,522,,,,522,,522,522,522,522,522,522',
'522,,,,,,522,522,522,522,522,522,522,,,522,,,,,,,522,,,522,522,522,522',
'522,522,522,522,522,522,522,522,,522,522,522,522,522,,,,,,,,,,,,,,,',
',,,,522,,,522,,,522,522,,,522,,522,,522,,522,,,522,,,,,,522,,,,,522',
'522,522,522,,522,522,522,522,,,,,522,522,,,,,,,522,,522,522,522,,,,522',
'522,522,528,528,528,,528,,,,528,528,,,,528,,528,528,528,528,528,528',
'528,,,,,,528,528,528,528,528,528,528,,,528,,,,,,,528,,,528,528,528,528',
'528,528,528,528,,528,528,528,,528,528,,,528,,,,,,,,,,,,,,,,,,,,528,',
',528,,,528,528,,,528,,,,,,,,,,,,,,,,,,,,528,528,528,528,,528,528,528',
'528,,,,,528,528,,,,,,,528,,528,528,528,531,531,531,,531,528,,,531,531',
',,,531,,531,531,531,531,531,531,531,,,,,,531,531,531,531,531,531,531',
',,531,,,,,,,531,,,531,531,531,531,531,531,531,531,,531,531,531,,531',
'531,531,531,531,,,,,,,,,,,,,,,,,,,,531,,,531,,,531,531,,,531,,,,,,531',
',,,,,,,,531,,,,,531,531,531,531,,531,531,531,531,,,,,531,531,,,,,,,531',
',531,531,531,,,,531,531,531,534,534,534,,534,,,,534,534,,,,534,,534',
'534,534,534,534,534,534,,,,,,534,534,534,534,534,534,534,,,534,,,,,',
',534,,,534,534,534,534,534,534,534,534,,534,534,534,,534,534,534,534',
'534,,,,,,,,,,,,,,,,,,,,534,,,534,,,534,534,,,534,,,,,,534,,,,,,,,,534',
',,,,534,534,534,534,,534,534,534,534,,,,,534,534,,,,,,,534,,534,534',
'534,,,,534,534,534,537,537,537,,537,,,,537,537,,,,537,,537,537,537,537',
'537,537,537,,,,,,537,537,537,537,537,537,537,,,537,,,,,,,537,,,537,537',
'537,537,537,537,537,537,,537,537,537,,537,537,537,537,537,,,,,,,,,,',
',,,,,,,,,537,,,537,,,537,537,,,537,,,,,,537,,,,,,,,,537,,,,,537,537',
'537,537,,537,537,537,537,,,,,537,537,,,,,,,537,,537,537,537,,,,537,537',
'537,543,543,543,,543,,,,543,543,,,,543,,543,543,543,543,543,543,543',
',,,,,543,543,543,543,543,543,543,,,543,,,,,,,543,,,543,543,543,543,543',
'543,543,543,543,543,543,543,,543,543,543,543,543,,,,,,,,,,,,,,,,,,,',
'543,,,543,,,543,543,,,543,,543,,,,543,,,543,,,,,,543,,,,,543,543,543',
'543,,543,543,543,543,,,,,543,543,,,,,,,543,,543,543,543,,,,543,543,543',
'546,546,546,,546,,,,546,546,,,,546,,546,546,546,546,546,546,546,,,,',
',546,546,546,546,546,546,546,,,546,,,,,,,546,,,546,546,546,546,546,546',
'546,546,546,546,546,546,,546,546,546,546,546,,,,,,,,,,,,,,,,,,,,546',
',,546,,,546,546,,,546,,,,,,546,,,546,,,,,,546,,,,,546,546,546,546,,546',
'546,546,546,,,,,546,546,,,,,,,546,,546,546,546,,,,546,546,546,571,571',
'571,,571,,,,571,571,,,,571,,571,571,571,571,571,571,571,,,,,,571,571',
'571,571,571,571,571,,,571,,,,,,,571,,,571,571,571,571,571,571,571,571',
',571,571,571,,571,571,571,571,571,,,,,,,,,,,,,,,,,,,,571,,,571,,,571',
'571,,,571,,,,,,571,,,,,,,,,571,,,,,571,571,571,571,,571,571,571,571',
',,,,571,571,,,,,,,571,,571,571,571,,,,571,571,571,592,592,592,,592,',
',,592,592,,,,592,,592,592,592,592,592,592,592,,,,,,592,592,592,592,592',
'592,592,,,592,,,,,,,592,,,592,592,592,592,592,592,592,592,,592,592,592',
',592,592,592,592,592,,,,,,,,,,,,,,,,,,,,592,,,592,,,592,592,,,592,,592',
',,,592,,,,,,,,,592,,,,,592,592,592,592,,592,592,592,592,,,,,592,592',
',,,,,,592,,592,592,592,,,,592,592,592,593,593,593,,593,,,,593,593,,',
',593,,593,593,593,593,593,593,593,,,,,,593,593,593,593,593,593,593,',
',593,,,,,,,593,,,593,593,593,593,593,593,593,593,593,593,593,593,,593',
'593,593,593,593,,,,,,,,,,,,,,,,,,,,593,,,593,,,593,593,,,593,,593,,593',
',593,,,593,,,,,,593,,,,,593,593,593,593,,593,593,593,593,,,,,593,593',
',,,,,,593,,593,593,593,,,,593,593,593,603,603,603,,603,,,,603,603,,',
',603,,603,603,603,603,603,603,603,,,,,,603,603,603,603,603,603,603,',
',603,,,,,,,603,,,603,603,603,603,603,603,603,603,603,603,603,603,,603',
'603,603,603,603,,,,,,,,,,,,,,,,,,,,603,,,603,,,603,603,,,603,,603,,603',
',603,,,603,,,,,,603,,,,,603,603,603,603,,603,603,603,603,,,,,603,603',
',,,,,,603,,603,603,603,,,,603,603,603,635,635,635,,635,,,,635,635,,',
',635,,635,635,635,635,635,635,635,,,,,,635,635,635,635,635,635,635,',
',635,,,,,,,635,,,635,635,635,635,635,635,635,635,,635,635,635,,635,635',
'635,635,635,,,,,,,,,,,,,,,,,,,,635,,,635,,,635,635,,,635,,635,,,,635',
',,,,,,,,635,,,,,635,635,635,635,,635,635,635,635,,,,,635,635,,,,,,,635',
',635,635,635,,,,635,635,635,636,636,636,,636,,,,636,636,,,,636,,636',
'636,636,636,636,636,636,,,,,,636,636,636,636,636,636,636,,,636,,,,,',
',636,,,636,636,636,636,636,636,636,636,,636,636,636,,636,636,636,636',
'636,,,,,,,,,,,,,,,,,,,,636,,,636,,,636,636,,,636,,,,,,636,,,,,,,,,636',
',,,,636,636,636,636,,636,636,636,636,,,,,636,636,,,,,,,636,,636,636',
'636,,,,636,636,636,637,637,637,,637,,,,637,637,,,,637,,637,637,637,637',
'637,637,637,,,,,,637,637,637,637,637,637,637,,,637,,,,,,,637,,,637,637',
'637,637,637,637,637,637,637,637,637,637,,637,637,637,637,637,,,,,,,',
',,,,,,,,,,,,637,,,637,,,637,637,,,637,,637,,637,,637,,,637,,,,,,637',
',,,,637,637,637,637,,637,637,637,637,,,,,637,637,,,,,,,637,,637,637',
'637,,,,637,637,637,640,640,640,640,640,,,,640,640,,,,640,,640,640,640',
'640,640,640,640,,,,,,640,640,640,640,640,640,640,,,640,,,,,,640,640',
',640,640,640,640,640,640,640,640,640,,640,640,640,,640,640,640,640,640',
',,,,,,,,,,,,,,,,,,,640,,,640,,,640,640,,,640,,640,,,,640,,,,,,,,,640',
',,,,640,640,640,640,,640,640,640,640,,,,,640,640,,,,,,,640,,640,640',
'640,,,,640,640,640,641,641,641,,641,,,,641,641,,,,641,,641,641,641,641',
'641,641,641,,,,,,641,641,641,641,641,641,641,,,641,,,,,,,641,,,641,641',
'641,641,641,641,641,641,,641,641,641,,641,641,641,641,641,,,,,,,,,,',
',,,,,,,,,641,,,641,,,641,641,,,641,,,,,,641,,,,,,,,,641,,,,,641,641',
'641,641,,641,641,641,641,,,,,641,641,,,,,,,641,,641,641,641,,,,641,641',
'641,644,644,644,,644,,,,644,644,,,,644,,644,644,644,644,644,644,644',
',,,,,644,644,644,644,644,644,644,,,644,,,,,,,644,,,644,644,644,644,644',
'644,644,644,644,644,644,644,,644,644,644,644,644,,,,,,,,,,,,,,,,,,,',
'644,,,644,,,644,644,,,644,,644,,644,,644,,,644,,,,,,644,,,,,644,644',
'644,644,,644,644,644,644,,,,,644,644,,,,,,,644,,644,644,644,,,,644,644',
'644,645,645,645,,645,,,,645,645,,,,645,,645,645,645,645,645,645,645',
',,,,,645,645,645,645,645,645,645,,,645,,,,,,,645,,,645,645,645,645,645',
'645,645,645,645,645,645,645,,645,645,645,645,645,,,,,,,,,,,,,,,,,,,',
'645,,,645,,,645,645,,,645,,,,645,,645,,,645,,,,,,645,,,,,645,645,645',
'645,,645,645,645,645,,,,,645,645,,,,,,,645,,645,645,645,,,,645,645,645',
'646,646,646,,646,,,,646,646,,,,646,,646,646,646,646,646,646,646,,,,',
',646,646,646,646,646,646,646,,,646,,,,,,,646,,,646,646,646,646,646,646',
'646,646,,646,646,646,,646,646,646,646,646,,,,,,,,,,,,,,,,,,,,646,,,646',
',,646,646,,,646,,,,,,646,,,,,,,,,646,,,,,646,646,646,646,,646,646,646',
'646,,,,,646,646,,,,,,,646,,646,646,646,,,,646,646,646,647,647,647,,647',
',,,647,647,,,,647,,647,647,647,647,647,647,647,,,,,,647,647,647,647',
'647,647,647,,,647,,,,,,,647,,,647,647,647,647,647,647,647,647,,647,647',
'647,,647,647,647,647,647,,,,,,,,,,,,,,,,,,,,647,,,647,,,647,647,,,647',
',,,,,647,,,,,,,,,647,,,,,647,647,647,647,,647,647,647,647,,,,,647,647',
',,,,,,647,,647,647,647,,,,647,647,647,651,651,651,,651,,,,651,651,,',
',651,,651,651,651,651,651,651,651,,,,,,651,651,651,651,651,651,651,',
',651,,,,,,,651,,,651,651,651,651,651,651,651,651,,651,651,651,,651,651',
'651,651,651,,,,,,,,,,,,,,,,,,,,651,,,651,,,651,651,,,651,,,,,,651,,',
',,,,,,651,,,,,651,651,651,651,,651,651,651,651,,,,,651,651,,,,,,,651',
',651,651,651,,,,651,651,651,652,652,652,,652,,,,652,652,,,,652,,652',
'652,652,652,652,652,652,,,,,,652,652,652,652,652,652,652,,,652,,,,,',
',652,,,652,652,652,652,652,652,652,652,,652,652,652,,652,652,652,652',
'652,,,,,,,,,,,,,,,,,,,,652,,,652,,,652,652,,,652,,,,,,652,,,,,,,,,652',
',,,,652,652,652,652,,652,652,652,652,,,,,652,652,,,,,,,652,,652,652',
'652,,,,652,652,652,676,676,676,,676,,,,676,676,,,,676,,676,676,676,676',
'676,676,676,,,,,,676,676,676,676,676,676,676,,,676,,,,,,,676,,,676,676',
'676,676,676,676,676,676,,676,676,676,,676,676,676,676,676,,,,,,,,,,',
',,,,,,,,,676,,,676,,,676,676,,,676,,,,,,676,,,,,,,,,676,,,,,676,676',
'676,676,,676,676,676,676,,,,,676,676,,,,,,,676,,676,676,676,,,,676,676',
'676,679,679,679,,679,,,,679,679,,,,679,,679,679,679,679,679,679,679',
',,,,,679,679,679,679,679,679,679,,,679,,,,,,,679,,,679,679,679,679,679',
'679,679,679,,679,679,679,,679,679,679,679,679,,,,,,,,,,,,,,,,,,,,679',
',,679,,,679,679,,,679,,,,,,679,,,,,,,,,679,,,,,679,679,679,679,,679',
'679,679,679,,,,,679,679,,,,,,,679,,679,679,679,,,,679,679,679,682,682',
'682,,682,,,,682,682,,,,682,,682,682,682,682,682,682,682,,,,,,682,682',
'682,682,682,682,682,,,682,,,,,,,682,,,682,682,682,682,682,682,682,682',
',682,682,682,,682,682,,,682,,,,,,,,,,,,,,,,,,,,682,,,682,,,682,682,',
',682,,,,,,,,,,,,,,,,,,,,682,682,682,682,,682,682,682,682,,,,,682,682',
',,,,,,682,,682,682,682,693,693,693,,693,682,,,693,693,,,,693,,693,693',
'693,693,693,693,693,,,,,,693,693,693,693,693,693,693,,,693,,,,,,,693',
',,693,693,693,693,693,693,693,693,,693,693,693,,693,693,,,693,,,,,,',
',,,,,,,,,,,,,693,,,693,,,693,693,,,693,,,,,,,,,,,,,,,,,,,,693,693,693',
'693,,693,693,693,693,,,,,693,693,,,,,,,693,,693,693,693,698,698,698',
',698,693,,,698,698,,,,698,,698,698,698,698,698,698,698,,,,,,698,698',
'698,698,698,698,698,,,698,,,,,,,698,,,698,698,698,698,698,698,698,698',
',698,698,698,,698,698,698,698,698,,,,,,,,,,,,,,,,,,,,698,,,698,,,698',
'698,,,698,,698,,,,698,,,,,,,,,698,,,,,698,698,698,698,,698,698,698,698',
',,,,698,698,,,,,,,698,,698,698,698,,,,698,698,698,715,715,715,,715,',
',,715,715,,,,715,,715,715,715,715,715,715,715,,,,,,715,715,715,715,715',
'715,715,,,715,,,,,,,715,,,715,715,715,715,715,715,715,715,,715,715,715',
',715,715,715,715,715,,,,,,,,,,,,,,,,,,,,715,,,715,,,715,715,,,715,,',
',,,715,,,,,,,,,715,,,,,715,715,715,715,,715,715,715,715,,,,,715,715',
',,,,,,715,,715,715,715,,,,715,715,715,750,750,750,,750,,,,750,750,,',
',750,,750,750,750,750,750,750,750,,,,,,750,750,750,750,750,750,750,',
',750,,,,,,,750,,,750,750,750,750,750,750,750,750,,750,750,750,,750,750',
'750,750,750,,,,,,,,,,,,,,,,,,,,750,,,750,,,750,750,,,750,,,,,,750,,',
',,,,,,750,,,,,750,750,750,750,,750,750,750,750,,,,,750,750,,,,,,,750',
',750,750,750,,,,750,750,750,773,773,773,,773,,,,773,773,,,,773,,773',
'773,773,773,773,773,773,,,,,,773,773,773,773,773,773,773,,,773,,,,,',
',773,,,773,773,773,773,773,773,773,773,,773,773,773,,773,773,773,773',
'773,,,,,,,,,,,,,,,,,,,,773,,,773,,,773,773,,,773,,,,,,773,,,,,,,,,773',
',,,,773,773,773,773,,773,773,773,773,,,,,773,773,,,,,,,773,,773,773',
'773,,,,773,773,773,781,781,781,,781,,,,781,781,,,,781,,781,781,781,781',
'781,781,781,,,,,,781,781,781,781,781,781,781,,,781,,,,,,,781,,,781,781',
'781,781,781,781,781,781,,781,781,781,,781,781,781,781,781,,,,,,,,,,',
',,,,,,,,,781,,,781,,,781,781,,,781,,,,,,781,,,,,,,,,781,,,,,781,781',
'781,781,,781,781,781,781,,,,,781,781,,,,,,,781,,781,781,781,,,,781,781',
'781,794,794,794,,794,,,,794,794,,,,794,,794,794,794,794,794,794,794',
',,,,,794,794,794,794,794,794,794,,,794,,,,,,,794,,,794,794,794,794,794',
'794,794,794,,794,794,794,,794,794,794,794,794,,,,,,,,,,,,,,,,,,,,794',
',,794,,,794,794,,,794,,,,,,794,,,,,,,,,794,,,,,794,794,794,794,,794',
'794,794,794,,,,,794,794,,,,,,,794,,794,794,794,,,,794,794,794,795,795',
'795,,795,,,,795,795,,,,795,,795,795,795,795,795,795,795,,,,,,795,795',
'795,795,795,795,795,,,795,,,,,,,795,,,795,795,795,795,795,795,795,795',
',795,795,795,,795,795,795,795,795,,,,,,,,,,,,,,,,,,,,795,,,795,,,795',
'795,,,795,,,,,,795,,,,,,,,,795,,,,,795,795,795,795,,795,795,795,795',
',,,,795,795,,,,,,,795,,795,795,795,,,,795,795,795,796,796,796,,796,',
',,796,796,,,,796,,796,796,796,796,796,796,796,,,,,,796,796,796,796,796',
'796,796,,,796,,,,,,,796,,,796,796,796,796,796,796,796,796,,796,796,796',
',796,796,796,796,796,,,,,,,,,,,,,,,,,,,,796,,,796,,,796,796,,,796,,',
',,,796,,,,,,,,,796,,,,,796,796,796,796,,796,796,796,796,,,,,796,796',
',,,,,,796,,796,796,796,,,,796,796,796,797,797,797,,797,,,,797,797,,',
',797,,797,797,797,797,797,797,797,,,,,,797,797,797,797,797,797,797,',
',797,,,,,,,797,,,797,797,797,797,797,797,797,797,,797,797,797,,797,797',
'797,797,797,,,,,,,,,,,,,,,,,,,,797,,,797,,,797,797,,,797,,,,,,797,,',
',,,,,,797,,,,,797,797,797,797,,797,797,797,797,,,,,797,797,,,,,,,797',
',797,797,797,,,,797,797,797,799,799,799,,799,,,,799,799,,,,799,,799',
'799,799,799,799,799,799,,,,,,799,799,799,799,799,799,799,,,799,,,,,',
',799,,,799,799,799,799,799,799,799,799,,799,799,799,,799,799,799,799',
'799,,,,,,,,,,,,,,,,,,,,799,,,799,,,799,799,,,799,,,,,,799,,,,,,,,,799',
',,,,799,799,799,799,,799,799,799,799,,,,,799,799,,,,,,,799,,799,799',
'799,,,,799,799,799,851,851,851,,851,,,,851,851,,,,851,,851,851,851,851',
'851,851,851,,,,,,851,851,851,851,851,851,851,,,851,,,,,,,851,,,851,851',
'851,851,851,851,851,851,,851,851,851,,851,851,851,851,851,,,,,,,,,,',
',,,,,,,,,851,,,851,,,851,851,,,851,,,,,,851,,,,,,,,,851,,,,,851,851',
'851,851,,851,851,851,851,,,,,851,851,,,,,,,851,,851,851,851,,,,851,851',
'851,856,856,856,,856,,,,856,856,,,,856,,856,856,856,856,856,856,856',
',,,,,856,856,856,856,856,856,856,,,856,,,,,,,856,,,856,856,856,856,856',
'856,856,856,,856,856,856,,856,856,856,856,856,,,,,,,,,,,,,,,,,,,,856',
',,856,,,856,856,,,856,,856,,,,856,,,,,,,,,856,,,,,856,856,856,856,,856',
'856,856,856,,,,,856,856,,,,,,,856,,856,856,856,,,,856,856,856,874,874',
'874,,874,,,,874,874,,,,874,,874,874,874,874,874,874,874,,,,,,874,874',
'874,874,874,874,874,,,874,,,,,,,874,,,874,874,874,874,874,874,874,874',
'874,874,874,874,,874,874,874,874,874,,,,,,,,,,,,,,,,,,,,874,,,874,,',
'874,874,,,874,,,,874,,874,,,874,,,,,,874,,,,,874,874,874,874,,874,874',
'874,874,,,,,874,874,,,,,,,874,,874,874,874,,,,874,874,874,875,875,875',
',875,,,,875,875,,,,875,,875,875,875,875,875,875,875,,,,,,875,875,875',
'875,875,875,875,,,875,,,,,,,875,,,875,875,875,875,875,875,875,875,,875',
'875,875,,875,875,875,875,875,,,,,,,,,,,,,,,,,,,,875,,,875,,,875,875',
',,875,,,,,,875,,,,,,,,,875,,,,,875,875,875,875,,875,875,875,875,,,,',
'875,875,,,,,,,875,,875,875,875,,,,875,875,875,889,889,889,,889,,,,889',
'889,,,,889,,889,889,889,889,889,889,889,,,,,,889,889,889,889,889,889',
'889,,,889,,,,,,,889,,,889,889,889,889,889,889,889,889,,889,889,889,',
'889,889,,,889,,,,,,,,,,,,,,,,,,,,889,,,889,,,889,889,,,889,,,,,,,,,',
',,,,,,,,,,889,889,889,889,,889,889,889,889,,,,,889,889,,,,,,,889,,889',
'889,889,898,898,898,,898,889,,,898,898,,,,898,,898,898,898,898,898,898',
'898,,,,,,898,898,898,898,898,898,898,,,898,,,,,,,898,,,898,898,898,898',
'898,898,898,898,,898,898,898,,898,898,,,898,,,,,,,,,,,,,,,,,,,,898,',
',898,,,898,898,,,898,,,,,,,,,,,,,,,,,,,,898,898,898,898,,898,898,898',
'898,,,,,898,898,,,,,,,898,,898,898,898,984,984,984,,984,898,,,984,984',
',,,984,,984,984,984,984,984,984,984,,,,,,984,984,984,984,984,984,984',
',,984,,,,,,,984,,,984,984,984,984,984,984,984,984,,984,984,984,,984',
'984,,,984,,,,,,,,,,,,,,,,,,,,984,,,984,,,984,984,,,984,,,,,,,,,,,,,',
',,,,,,984,984,984,984,,984,984,984,984,,,,,984,984,,,,,,,984,,984,984',
'984,1011,1011,1011,,1011,984,,,1011,1011,,,,1011,,1011,1011,1011,1011',
'1011,1011,1011,,,,,,1011,1011,1011,1011,1011,1011,1011,,,1011,,,,,,',
'1011,,,1011,1011,1011,1011,1011,1011,1011,1011,,1011,1011,1011,,1011',
'1011,1011,1011,1011,,,,,,,,,,,,,,,,,,,,1011,,,1011,,,1011,1011,,,1011',
',,,,,1011,,,,,,,,,1011,,,,,1011,1011,1011,1011,,1011,1011,1011,1011',
',,,,1011,1011,,,,,,,1011,,1011,1011,1011,,,,1011,1011,1011,1012,1012',
'1012,,1012,,,,1012,1012,,,,1012,,1012,1012,1012,1012,1012,1012,1012',
',,,,,1012,1012,1012,1012,1012,1012,1012,,,1012,,,,,,,1012,,,1012,1012',
'1012,1012,1012,1012,1012,1012,,1012,1012,1012,,1012,1012,1012,1012,1012',
',,,,,,,,,,,,,,,,,,,1012,,,1012,,,1012,1012,,,1012,,,,,,1012,,,,,,,,',
'1012,,,,,1012,1012,1012,1012,,1012,1012,1012,1012,,,,,1012,1012,,,,',
',,1012,,1012,1012,1012,,,,1012,1012,1012,1062,1062,1062,,1062,,,,1062',
'1062,,,,1062,,1062,1062,1062,1062,1062,1062,1062,,,,,,1062,1062,1062',
'1062,1062,1062,1062,,,1062,,,,,,,1062,,,1062,1062,1062,1062,1062,1062',
'1062,1062,1062,1062,1062,1062,,1062,1062,1062,1062,1062,,,,,,,,,,,,',
',,,,,,,1062,,,1062,,,1062,1062,,,1062,,1062,,1062,,1062,,,1062,,,,,',
'1062,,,,,1062,1062,1062,1062,,1062,1062,1062,1062,,,,,1062,1062,,,,',
',,1062,,1062,1062,1062,27,,,1062,1062,1062,,27,27,27,,,27,27,27,,27',
',,,,,,,27,27,27,27,,,,,,,,,27,27,,27,27,27,27,27,,,,,,,,,,,,,,,,,,,',
',,,27,27,27,27,27,27,27,27,27,27,27,27,27,27,,,27,27,27,,,27,,27,27',
',,27,27,,27,,27,,27,,27,27,,27,27,27,27,27,28,27,27,27,,,,28,28,28,',
',28,28,28,,28,27,,,27,27,,27,28,27,28,28,,,,,27,27,,,28,28,,28,28,28',
'28,28,,,,,,,,,,,,,,,,,,,,,,,28,28,28,28,28,28,28,28,28,28,28,28,28,28',
',,28,28,28,,,28,,28,28,,,28,28,,28,,28,,28,,28,28,,28,28,28,28,28,59',
'28,,28,,,,59,59,59,,,59,59,59,,59,28,,,28,28,,28,59,28,59,59,59,,,,28',
'28,,,59,59,,59,59,59,59,59,,,,,,,,,,,,,,,,,,,,,,,59,59,59,59,59,59,59',
'59,59,59,59,59,59,59,,,59,59,59,,,59,,,59,,,59,59,,59,,59,,59,,59,59',
',59,59,59,59,59,,59,,59,,,,,,713,,713,713,713,713,713,,59,,,59,59,59',
'59,713,59,,59,441,,,,59,59,,441,441,441,,,441,441,441,,441,,713,,,,',
',441,441,441,441,,713,713,,,,713,,441,441,,441,441,441,441,441,,,,,',
',,,,,,,,,,,,,,,,,441,441,441,441,441,441,441,441,441,441,441,441,441',
'441,,,441,441,441,,,441,,441,441,,,441,441,,441,,441,,441,,441,441,',
'441,441,441,441,441,,441,441,441,907,,907,907,907,907,907,,,,,,,441',
',907,441,441,450,441,,441,,,,450,450,450,441,441,450,450,450,,450,,',
'907,,,,,450,450,450,450,450,,907,907,,,,907,450,450,,450,450,450,450',
'450,,,,,,,,,,,,,,,,,,,,,,,450,450,450,450,450,450,450,450,450,450,450',
'450,450,450,,,450,450,450,,,450,,,450,,,450,450,,450,,450,,450,,450',
'450,,450,450,450,450,450,,450,450,450,,,,,,909,,909,909,909,909,909',
',450,,,450,450,450,450,909,450,,450,451,,,,450,450,,451,451,451,,,451',
'451,451,,451,,909,,,,,,451,451,451,451,451,909,909,,,,909,,451,451,',
'451,451,451,451,451,,,,,,,,,,,,,,,,,,,,,,,451,451,451,451,451,451,451',
'451,451,451,451,451,451,451,,,451,451,451,,,451,,,451,,,451,451,,451',
',451,,451,,451,451,,451,451,451,451,451,,451,451,451,,,,,,,,,,,,,,451',
',,451,451,451,451,,451,,451,492,,,,451,451,,492,492,492,,,492,492,492',
'911,492,911,911,911,911,911,,,492,492,492,,,,911,,945,945,945,945,492',
'492,,492,492,492,492,492,,,,,945,945,945,,911,,807,,807,807,807,807',
'807,945,945,911,911,945,,,911,807,,,,,,,,492,,,,,,,492,,,,,492,492,807',
',,,,,,,,807,807,807,807,,,,807,,,,,492,492,,945,945,945,945,,945,945',
'945,945,,,,492,945,945,492,,,807,,492,945,,945,945,945,,492,8,8,8,8',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,,,',
'8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,',
',,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,,,,8,9,9,9,9',
'9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,,,',
'9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,,,',
',,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,,,,9,408,408',
'408,408,408,408,408,408,408,408,408,408,408,408,408,408,408,408,408',
'408,408,408,408,408,,,,408,408,408,408,408,408,408,408,408,408,,,,,',
'408,408,408,408,408,408,408,408,408,,,408,,,,,,,,408,408,,408,408,408',
'408,408,408,408,,,408,408,,,,408,408,408,408,,,,,,,,,,,,,,408,408,,408',
'408,408,408,408,408,408,408,408,408,408,408,,,408,408,,,,,,,,,,,,,,408',
'632,632,632,632,632,632,632,632,632,632,632,632,632,632,632,632,632',
'632,632,632,632,632,632,632,,,,632,632,632,632,632,632,632,632,632,632',
',,,,,632,632,632,632,632,632,632,632,632,,,632,,,,,,,,632,632,,632,632',
'632,632,632,632,632,,,632,632,,,,632,632,632,632,,,,,,,,,,,,,,632,632',
',632,632,632,632,632,632,632,632,632,632,632,632,,,632,632,855,855,855',
'855,,,980,,980,980,980,980,980,632,,,855,855,855,855,,980,,855,855,',
',,,855,855,,,855,855,,,,,,,,,980,,,,,,,,,,855,980,980,855,,,980,855',
',,855,,855,,,,,,,855,,,,,,,855,,,,855,855,855,855,,855,855,855,855,',
',,,855,855,932,932,932,932,,,855,,855,855,855,,,,855,855,932,932,932',
'932,,,551,932,551,551,551,551,551,932,932,,,932,,,,551,,,,,,,,,,,,,',
',,932,,,932,,,551,932,,,932,,932,,,551,551,551,551,,,,551,,,,932,,,',
'932,932,932,932,,932,932,932,932,,,,,932,932,932,934,934,934,934,,932',
',932,932,932,,,,932,932,,934,934,934,934,,,709,934,709,709,709,709,709',
'934,934,,,934,,,,709,,,,,,,,,,,,,,,,934,,,934,,,709,934,,,934,,,,,709',
'709,709,709,,,,709,,,,934,,,,934,934,934,934,,934,934,934,934,,,,,934',
'934,939,939,939,939,,,934,,934,934,934,,,,934,934,939,939,939,939,,',
'711,939,711,711,711,711,711,939,939,,,939,,,,711,,,,,,,,,,,,,,,,939',
',,939,,,711,939,,,939,,,,,711,711,711,711,,,,711,,,,939,,,,939,939,939',
'939,,939,939,939,939,,,,,939,939,1013,1013,1013,1013,,,939,,939,939',
'939,,,,939,939,1013,1013,1013,1013,,,754,1013,754,754,754,754,754,1013',
'1013,,,1013,,,,754,,,,,,,,,,,,,,,,1013,,,1013,,,754,1013,,,1013,,1013',
',,754,754,754,754,,,,754,,,,1013,,,,1013,1013,1013,1013,,1013,1013,1013',
'1013,,,,,1013,1013,1015,1015,1015,1015,,,1013,,1013,1013,1013,,,,1013',
'1013,1015,1015,1015,1015,,,755,1015,755,755,755,755,755,1015,1015,,',
'1015,,,,755,,,,,,,,,,,,,,,,1015,,,1015,,,755,1015,,,1015,,,,,755,755',
'755,755,,,,755,,,,1015,,,,1015,1015,1015,1015,,1015,1015,1015,1015,',
',,,1015,1015,1016,1016,1016,1016,,,1015,,1015,1015,1015,,,,1015,1015',
'1016,1016,1016,1016,,,,1016,1016,,,,,1016,1016,,,1016,1016,,,,,,,,,',
',,,,,,,,,1016,,,1016,,,,1016,,,1016,,1016,,,,,,,1016,,,,,,,1016,,,,1016',
'1016,1016,1016,,1016,1016,1016,1016,,,,,1016,1016,1016,1017,1017,1017',
'1017,,1016,,1016,1016,1016,,,,1016,1016,,1017,1017,1017,1017,,,,1017',
'1017,,,,,1017,1017,,,1017,1017,,,,,,,,,,,,,,,,,,,1017,,,1017,,,,1017',
',,1017,,1017,,,,,,,1017,,,,,,,1017,,,,1017,1017,1017,1017,,1017,1017',
'1017,1017,,,,,1017,1017,1017,1022,1022,1022,1022,,1017,,1017,1017,1017',
',,,1017,1017,,1022,1022,1022,1022,,,905,1022,905,905,905,905,905,1022',
'1022,,,1022,,,,905,,,,,,,,,,,,,,,,1022,,,1022,,,905,1022,,,1022,,1022',
',,905,905,905,905,,,,905,,,,1022,,,,1022,1022,1022,1022,,1022,1022,1022',
'1022,,,,,1022,1022,1030,1030,1030,1030,,,1022,,1022,1022,1022,,,,1022',
'1022,1030,1030,1030,1030,,,976,1030,976,976,976,976,976,1030,1030,,',
'1030,,,,976,,,,,,,,,,,,,,,,1030,,,1030,,,976,1030,,,1030,,,,,976,976',
'976,976,,,,976,,,,1030,,,,1030,1030,1030,1030,,1030,1030,1030,1030,',
',,,1030,1030,1099,1099,1099,1099,,,1030,,1030,1030,1030,,,,1030,1030',
'1099,1099,1099,1099,,,978,1099,978,978,978,978,978,1099,1099,,,1099',
',,,978,,,,,,,,,,,,,,,,1099,,,1099,,,978,1099,,,1099,,,,,978,978,978',
'978,,,,978,,,,1099,,,,1099,1099,1099,1099,,1099,1099,1099,1099,,,,,1099',
'1099,1104,1104,1104,1104,,,1099,,1099,1099,1099,,,,1099,1099,1104,1104',
'1104,1104,,,1070,1104,1070,1070,1070,1070,1070,1104,1104,,,1104,,,,1070',
',,,,,,,,,,,,,,,1104,,,1104,,,1070,1104,,,1104,,,,,,,1070,1070,,,,1070',
',,,1104,,,,1104,1104,1104,1104,,1104,1104,1104,1104,,,,,1104,1104,1137',
'1137,1137,1137,,,1104,,1104,1104,1104,,,,1104,1104,1137,1137,1137,1137',
',,1109,1137,1109,1109,1109,1109,1109,1137,1137,,,1137,,,,1109,,,,,,',
',,,,,,,,,1137,,,1137,,,1109,1137,,,1137,,,,,1109,1109,1109,1109,,,,1109',
',,,1137,,,,1137,1137,1137,1137,,1137,1137,1137,1137,,,,,1137,1137,1139',
'1139,1139,1139,,,1137,,1137,1137,1137,,,,1137,1137,1139,1139,1139,1139',
',,1111,1139,1111,1111,1111,1111,1111,1139,1139,,,1139,,,,1111,,,,,,',
',,,,,,,,,1139,,,1139,,,1111,1139,,,1139,,,,,,,1111,1111,,,,1111,,,,1139',
',,,1139,1139,1139,1139,,1139,1139,1139,1139,,,,,1139,1139,1151,1151',
'1151,1151,,,1139,,1139,1139,1139,,,,1139,1139,1151,1151,1151,1151,,',
'1113,1151,1113,1113,1113,1113,1113,1151,1151,,,1151,,,,1113,,,,,,,,',
',,,,,,,1151,,,1151,,,1113,1151,,,1151,,,,,,,1113,1113,,,,1113,,,,1151',
',,,1151,1151,1151,1151,,1151,1151,1151,1151,,,,,1151,1151,,,,,,,1151',
',1151,1151,1151,,,,1151,1151,756,756,756,756,756,756,756,756,756,756',
'756,756,756,756,756,756,756,756,756,756,756,756,756,756,,,,756,756,756',
'756,756,756,756,756,756,756,,,,,,756,756,756,756,756,756,756,756,756',
',,756,,,,,,,,756,756,,756,756,756,756,756,756,756,,,756,756,,,,756,756',
'756,756,,,,,,,,,,,,,,756,756,,756,756,756,756,756,756,756,756,756,756',
'756,756,,,756,946,946,946,946,,,,348,,348,348,348,348,348,,,946,946',
'946,,,,348,,,,,,,946,946,,,946,1035,1035,1035,1035,,,,,,,348,348,,,',
',1035,1035,1035,348,348,348,348,,,,348,,,1035,1035,,,1035,,,,,,,,,,',
',,,,,946,946,946,946,,946,946,946,946,,,,,946,946,,,,,,,946,,946,946',
'946,,,,,,,,,1035,1035,1035,1035,,1035,1035,1035,1035,,,,,1035,1035,1036',
'1036,1036,1036,,,1035,,1035,1035,1035,,,,,,1036,1036,1036,218,218,,',
'218,,,,,,1036,1036,218,218,1036,218,218,218,218,218,218,218,,,218,218',
',,,218,218,218,218,,,,,,218,,,,,,,,218,218,,218,218,218,218,218,218',
'218,218,218,218,218,218,,,218,1036,1036,1036,1036,,1036,1036,1036,1036',
',,,,1036,1036,219,219,,,219,,1036,,1036,1036,1036,,219,219,,219,219',
'219,219,219,219,219,,,219,219,,,,219,219,219,219,,,,,,219,,,,,,,,219',
'219,,219,219,219,219,219,219,219,219,219,219,219,219,220,220,219,,220',
',,,,,,,220,220,,220,220,220,220,220,220,220,,,220,220,,,,220,220,220',
'220,,,,,,,,,,,,,,220,220,,220,220,220,220,220,220,220,220,220,220,220',
'220,268,268,220,,268,,,,,,,,268,268,,268,268,268,268,268,268,268,,,268',
'268,,,,268,268,268,268,,,,,,,,,,,,,,268,268,,268,268,268,268,268,268',
'268,268,268,268,268,268,461,461,268,,461,,,,,,,,461,461,,461,461,461',
'461,461,461,461,,,461,461,,,,461,461,461,461,,,,,,461,,,,,,,,461,461',
',461,461,461,461,461,461,461,461,461,461,461,461,462,462,461,,462,,',
',,,,,462,462,,462,462,462,462,462,462,462,,,462,462,,,,462,462,462,462',
',,,,,462,,,,,,,,462,462,,462,462,462,462,462,462,462,462,462,462,462',
'462,523,523,462,,523,,,,,,,,523,523,,523,523,523,523,523,523,523,,,523',
'523,,,,523,523,523,523,,,,,,523,,,,,,,,523,523,,523,523,523,523,523',
'523,523,523,523,523,523,523,524,524,523,,524,,,,,,,,524,524,,524,524',
'524,524,524,524,524,,,524,524,,,,524,524,524,524,,,,,,524,,,,,,,,524',
'524,,524,524,524,524,524,524,524,524,524,524,524,524,532,532,524,,532',
',,,,,,,532,532,,532,532,532,532,532,532,532,,,532,532,,,,532,532,532',
'532,,,,,,532,,,,,,,,532,532,,532,532,532,532,532,532,532,532,532,532',
'532,532,533,533,532,,533,,,,,,,,533,533,,533,533,533,533,533,533,533',
',,533,533,,,,533,533,533,533,,,,,,533,,,,,,,,533,533,,533,533,533,533',
'533,533,533,533,533,533,533,533,594,594,533,,594,,,,,,,,594,594,,594',
'594,594,594,594,594,594,,,594,594,,,,594,594,594,594,,,,,,594,,,,,,',
',594,594,,594,594,594,594,594,594,594,594,594,594,594,594,595,595,594',
',595,,,,,,,,595,595,,595,595,595,595,595,595,595,,,595,595,,,,595,595',
'595,595,,,,,,595,,,,,,,,595,595,,595,595,595,595,595,595,595,595,595',
'595,595,595,601,601,595,,601,,,,,,,,601,601,,601,601,601,601,601,601',
'601,,,601,601,,,,601,601,601,601,,,,,,601,,,,,,,,601,601,,601,601,601',
'601,601,601,601,601,601,601,601,601,602,602,601,,602,,,,,,,,602,602',
',602,602,602,602,602,602,602,,,602,602,,,,602,602,602,602,,,,,,602,',
',,,,,,602,602,,602,602,602,602,602,602,602,602,602,602,602,602,638,638',
'602,,638,,,,,,,,638,638,,638,638,638,638,638,638,638,,,638,638,,,,638',
'638,638,638,,,,,,638,,,,,,,,638,638,,638,638,638,638,638,638,638,638',
'638,638,638,638,639,639,638,,639,,,,,,,,639,639,,639,639,639,639,639',
'639,639,,,639,639,,,,639,639,639,639,,,,,,639,,,,,,,,639,639,,639,639',
'639,639,639,639,639,639,639,639,639,639,1059,1059,639,,1059,,,,,,,,1059',
'1059,,1059,1059,1059,1059,1059,1059,1059,,,1059,1059,,,,1059,1059,1059',
'1059,,,,,,1059,,,,,,,,1059,1059,,1059,1059,1059,1059,1059,1059,1059',
'1059,1059,1059,1059,1059,1063,1063,1059,,1063,,,,,,,,1063,1063,,1063',
'1063,1063,1063,1063,1063,1063,,,1063,1063,,,,1063,1063,1063,1063,,,',
',,1063,,,,,,,,1063,1063,,1063,1063,1063,1063,1063,1063,1063,1063,1063',
'1063,1063,1063,1064,1064,1063,,1064,,,,,,,,1064,1064,,1064,1064,1064',
'1064,1064,1064,1064,,,1064,1064,,,,1064,1064,1064,1064,,,,,,1064,,,',
',,,,1064,1064,,1064,1064,1064,1064,1064,1064,1064,1064,1064,1064,1064',
'1064,,1115,1064,1115,1115,1115,1115,1115,1154,,1154,1154,1154,1154,1154',
',1115,,,,,,,1154,,,,,,,,,,,,,,,1115,,,,,,,1154,,,,1115,1115,,,,1115',
',1154,1154,,,,1154' ]
        racc_action_check = arr = ::Array.new(28631, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   968,    10,   nil,   -97,   nil,  5201,  1099,   -83, 25139, 25267,
   -53,   nil,   103,   110,   268,   202,   -62,   125,   nil,   -68,
  5346,  1552,   315,   nil,   145,   nil,    33, 24232, 24342,  5491,
  5636,  5781,   nil,  1114,  5926,  6065,   nil,   215,   354,   420,
   377,  6204,  6349,   325,  6494,  6639,   660,  6784,   344,   440,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 24452,
   nil,  6929,  7074,  7219,   -23,   nil,  7364,  7509,   nil,   nil,
  7654,  7799,  7938,  8077,  8222,   nil,   nil,   nil,   nil,   nil,
   -84,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     0,   nil,   nil,   112,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   488,   nil,  8340,   nil,   nil,
   nil,   nil,  8485,  8630,  8775,  8920,  9065,   nil,  1260,   nil,
     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   357,
   nil,  1406,  9210,  9355,  9500,  9645,  9790,  9935, 27341, 27420,
 27481,   nil,   nil, 10080, 10225, 10370,   nil,   nil,   547,   166,
   194,   445,   254,   355,   444,   nil, 10515,  1552,   459, 10660,
 10805, 10950, 11095, 11240, 11385, 11530, 11675, 11820, 11965, 12110,
 12255, 12400, 12545, 12690, 12835, 12980, 13125, 13270, 13415, 13560,
 13705,   nil,   nil,   nil,   nil, 13850,   nil,   nil, 27542,   nil,
   nil,   461, 13995, 14140,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 14285,   nil,  1698,   nil,   427,   436,   nil, 14430,   497,
 14575,   nil,   nil, 14720, 14865,   nil,   nil,   148,   nil, 15010,
  1245,   485,   460,  1698,   489,   548,   508, 15155,  1844,   581,
   738,   778,   608,   805,   nil,   609,   570,   339,   nil,   nil,
   nil,   621,   333,   594, 15294,   nil,   522,   850,  2574,  2720,
   667,   nil,   677, 15433,   nil, 15578,  1990,  1537,   620,   nil,
   -45,   329,   659,   653,   356,   689,   nil,   nil, 27197,   380,
    -1,    11, 15723,  2136,  2282,   154,   767,   650,   -23,   -19,
   951,   747,   -18,   782,   nil,   nil,   501,   724,   152,   nil,
   957,   nil,   709, 15868,   nil,   nil,   nil,   304,   472,   488,
   555,   617,   629,   642,   670,   693,   nil,   695,   nil, 16013,
   nil,   395,   467,   503,   536,   542,   -35,   149,   546,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   705, 25395,   nil,
   nil,   nil,   nil,   707,   nil,   nil,   705, 16158,   710,   nil,
   nil,   697,   nil,   980,   344,   802,   nil,   nil,  1114,   nil,
   nil,   nil,   nil,   nil,  1260,   720,   nil,   720,   727,   526,
   622, 24590,   nil,   nil,   nil,   224,   336,   772,   nil,   nil,
 24722, 24860,   nil,   nil,   nil,   nil,   nil,   nil,   -33,   nil,
   775, 27603, 27664, 16303,   371, 16448, 16593, 16738,  2866,  3012,
   793,   852,   812,   817,   819,   820,  4618,  4764,  4910,  3158,
  3304,  3450,  3596,  3742,  3888,  1408,  2602,  4034,  4180,  1844,
  4326,   nil, 24998,   nil,   nil,   760,   nil,   nil,   nil,   762,
   nil,   nil, 16883,   nil, 17028,   nil, 17173,   nil,   373,   nil,
   nil,   nil, 17318,  1552,   nil,   763,   761,   nil,   nil,   764,
 17463,   783, 17602, 27725, 27786,   984,   833,   nil, 17747,   795,
   nil, 17886, 27847, 27908, 18031,  4472,  1990, 18176,   922,   921,
   802,   859,   nil, 18321,   nil,   nil, 18466,   nil,   nil,   nil,
   nil, 25708,   nil,   818,   819,   nil,   820,   823,   826,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   814,  2414,   nil,
   nil, 18611,   nil,   nil,   nil,   914,   nil,   nil,   nil,   916,
   nil,   nil,   926,  2428,   969,   nil,  2574,   151,   973,   986,
   610,   987, 18756, 18901, 27969, 28030,    11,   nil,   nil,  1114,
   nil, 28091, 28152, 19046,   nil,   nil,   233,  2720,   921,   nil,
    20,   nil,   nil,   nil,   339,   nil,   nil,   nil,   905,   nil,
   nil,   222,   nil,   265,   nil,   nil,   903,   nil,   904,   nil,
   nil,   nil, 25523,   nil,   906, 19191, 19336, 19481, 28213, 28274,
 19626, 19771,   692,   946, 19916, 20061, 20206, 20351,   949,   nil,
   nil, 20496, 20641,   950,   nil,   nil,   nil,   375,   384,   468,
   609,   917,   917,  1046,   nil,  1031,   167,   nil,   nil,   949,
   -44,  1057,   nil,   934,   nil,   983, 20786,   nil,   nil, 20931,
   nil,   -99, 21076,   939,   nil,   944,    26,    27,   986,   138,
  1260,   987,   946, 21215,   nil,  1014,   240,  1067, 21354,   nil,
   nil,   nil,   382,    64,   952,   682,   nil,   nil,   429, 25807,
   nil, 25905,   nil, 24520,   nil, 21499,   nil,  2443,   nil,   954,
   370,   962,   nil,   nil,   nil,   nil,   640,   nil,  1081,   nil,
   nil,   nil,   nil,   nil,  1089,  1094,   nil,   nil,    33,   975,
    71,    80,   232,   249,  2866,   959,  1389,   nil,   979,  3012,
 21644,   nil,  1101,  3158, 26003, 26101, 27126,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  3304,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   978, 21789,   991,   439,   473,   721,   833,   nil,
  2136, 21934,   nil,   995,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 22079, 22224, 22369, 22514,   578, 22659,
   nil,   200,   nil,   nil,  1017,   nil,   nil, 25001,   nil,  3450,
   nil,   nil,   nil,   nil,  1017,    28,   nil,   nil,  1143,   nil,
  3596,  1020,  1067,   nil,   nil,   nil,   nil,   nil,   nil,  1020,
  1066,  1037,   nil,   nil,   nil,  1041,  1061,   nil,  1062,  1067,
   nil,  1068,   nil,   nil,  1073,  2473,  1071,  2453,   nil,  1199,
   nil, 22804,  1201,   nil,   nil, 25607, 22949,  3742,   229,  1204,
   nil,  1209,   512,  3888,   nil,  1217,  1097,   645,   nil,  1101,
  1100,   618,   nil,   nil, 23094, 23239,  2282,  4034,   nil,  1105,
  1106,   nil,  1107,  1108,  1111,   nil,  1137,  1118,  1102, 23384,
   nil,   nil,   nil,   nil,  4180,   nil,   nil,    34, 23523,   nil,
  4326,  4472,   954,   nil,   nil, 26397,   nil, 24653,   nil, 24790,
   nil, 24962,   nil,   nil,   nil,   nil,   399,  3144,  1118,   nil,
    35,   nil,    37,   617,   -69,   nil,   nil,   nil,  1146,   nil,
   nil,   795, 25705,   938, 25804,   -34,  1134,   nil,   nil, 25902,
   nil,  1217,   695,   nil,   nil, 24998, 27209,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1218,   179,
   nil,   nil,   444,   nil,   nil,   nil,  1263,   nil,   nil,   nil,
  1184,   nil,   nil,   858,   nil,   nil, 26495,   nil, 26593,   nil,
 25594,   nil,   nil,  1165, 23662,  1338,  1221,   nil,  4618,    41,
   111,  1395,  1241,   181,   nil,  1184,  1290,   383,   nil,   nil,
   nil,  1167,  1168,  1169,  1183,  1187,  3290,  1207,  3436,  4764,
   nil, 23801, 23946, 26000,  1290, 26098, 26196, 26295,   380,   304,
  1216,   nil, 26394,   nil,  1214,  1237,   nil,   nil,   -67,  1221,
 26492,   821,  1269,   463,   nil, 27243, 27341,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  4910,  1226,   nil,
   nil,  1231,  1239,  1240,  1241,   nil,  1246,   nil,  1406, 28335,
   nil,  1377, 24091, 28396, 28457,   185,   nil,   nil,   nil,  1392,
 26691,   nil,   nil,   nil,   nil,  3582,  1252,   796,  5056,   nil,
   nil,   nil,   nil,   nil,  1256,  1257,   nil,  1260,  1262,   nil,
   nil,   nil,  1306,  1261,   -32,   nil,   nil,   259,   nil, 26590,
  1262,   nil,   nil,   nil, 26688,   nil,   nil,  1388,   nil, 26789,
   nil, 26887,   nil, 26985,   nil, 28519,   nil,   nil,  1312,  1324,
   nil,  1284,   188,   204,   223,   239,   nil,  1285,  1286,   nil,
   212,   nil,   nil,   nil,   nil,   nil,  1287, 26786,  1297, 26884,
  1345,   nil,  1300,  1301,  1309,  1315,   250,   nil,   nil,   nil,
   nil, 26982,  1329,   nil, 28526,   nil,   nil,   nil,   nil,  1342,
  1343,   nil ]

racc_action_default = [
    -3,  -695,    -1,  -681,    -4,  -695,    -7,  -695,  -695,  -695,
  -695,   -30,  -695,  -695,   -34,  -695,  -695,  -289,   -46,  -683,
  -695,   -51,   -55,   -56,   -57,   -61,  -266,  -266,  -266,  -302,
  -332,  -333,   -73,   -12,   -77,   -85,   -87,  -695,  -585,  -586,
  -695,  -695,  -695,  -695,  -695,  -695,  -225,  -695,  -683,  -239,
  -280,  -281,  -282,  -283,  -284,  -285,  -286,  -287,  -288,  -669,
  -291,  -295,  -694,  -659,  -310,  -395,  -695,  -695,   -53,   -53,
  -681,  -695,  -695,  -695,  -695,  -334,  -335,  -338,  -523,  -524,
  -525,  -526,  -547,  -529,  -530,  -549,  -551,  -534,  -539,  -543,
  -545,  -562,  -563,  -564,  -547,  -566,  -568,  -569,  -570,  -571,
  -667,  -573,  -574,  -668,  -576,  -577,  -578,  -579,  -580,  -581,
  -582,  -583,  -584,  -589,  -590,  -695,    -2,  -682,  -690,  -691,
  -692,    -6,  -695,  -695,  -695,  -695,  -695,    -8,    -3,   -18,
  -695,  -116,  -117,  -118,  -119,  -120,  -121,  -122,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,  -195,  -196,   -23,
  -123,   -12,  -695,  -695,  -695,  -695,  -695,  -256,  -695,  -695,
  -695,  -679,  -680,  -695,  -695,  -683,  -684,   -50,  -695,  -585,
  -586,  -695,  -289,  -695,  -695,  -231,  -695,   -12,  -695,  -208,
  -209,  -695,  -695,  -695,  -695,  -695,  -695,  -695,  -695,  -695,
  -695,  -695,  -695,  -695,  -695,  -695,  -695,  -695,  -695,  -695,
  -695,  -240,  -241,  -242,  -243,  -695,  -404,  -406,  -695,  -677,
  -678,   -62,  -256,  -695,  -309,  -410,  -419,  -421,   -68,  -416,
   -69,  -683,   -70,  -246,  -261,  -270,  -270,  -265,  -695,  -271,
  -695,  -547,  -661,  -695,  -695,   -71,   -72,  -681,   -13,  -695,
   -16,  -695,   -75,   -12,  -683,  -695,   -78,   -81,   -12,   -93,
   -94,  -695,  -695,  -101,  -302,  -305,  -683,  -695,  -332,  -333,
  -337,  -417,  -695,   -83,  -695,   -89,  -299,  -695,  -210,  -211,
  -567,  -219,  -220,  -695,  -232,  -695,   -12,  -293,  -683,  -247,
  -687,  -687,  -695,  -695,  -687,  -695,  -311,  -312,  -617,   -52,
  -695,  -695,  -695,   -12,   -12,  -681,  -695,  -682,  -585,  -586,
  -695,  -695,  -289,  -695,  -348,  -349,  -111,  -112,  -695,  -114,
  -695,  -289,  -593,  -695,  -585,  -586,  -325,  -116,  -117,  -156,
  -157,  -158,  -174,  -179,  -186,  -189,  -327,  -695,  -657,  -695,
  -527,  -695,  -695,  -695,  -695,  -695,  -695,  -695,  -695,  1162,
    -5,  -693,   -24,   -25,   -26,   -27,   -28,  -695,  -695,   -20,
   -21,   -22,  -124,  -695,   -31,   -33,  -276,  -695,  -695,  -275,
   -32,  -695,   -35,  -695,  -289,   -43,   -45,  -197,  -251,  -271,
   -47,   -48,   -36,  -198,  -251,  -683,  -257,  -270,  -270,  -670,
  -671,  -266,  -414,  -672,  -673,  -671,  -670,  -266,  -413,  -415,
  -672,  -673,  -336,  -670,  -671,   -42,  -205,   -49,  -683,  -308,
  -695,  -695,  -695,  -256,  -299,  -695,  -695,  -695,  -206,  -207,
  -212,  -213,  -214,  -215,  -216,  -217,  -221,  -222,  -223,  -224,
  -226,  -227,  -228,  -229,  -230,  -233,  -234,  -235,  -236,  -683,
  -244,  -425,  -266,   -59,   -63,  -683,  -267,  -423,  -425,  -683,
  -304,  -262,  -695,  -263,  -695,  -268,  -695,  -272,  -695,  -664,
  -666,   -11,  -682,   -15,   -17,  -683,   -74,  -297,   -90,   -79,
  -695,  -683,  -256,  -695,  -695,  -100,  -695,  -567,  -695,   -86,
   -91,  -695,  -695,  -695,  -695,  -245,  -237,  -695,  -515,  -695,
  -683,  -695,  -248,  -689,  -688,  -250,  -689,  -300,  -301,  -660,
  -396,  -617,  -399,  -656,  -656,  -600,  -602,  -602,  -602,  -616,
  -618,  -619,  -620,  -621,  -622,  -623,  -624,  -625,  -695,  -627,
  -629,  -631,  -636,  -638,  -639,  -641,  -646,  -648,  -649,  -651,
  -652,  -653,  -695,   -12,  -339,  -340,   -12,  -695,  -695,  -695,
  -695,  -695,  -695,  -256,  -695,  -695,  -299,   -53,  -111,  -112,
  -113,  -695,  -695,  -256,  -321,  -591,  -695,   -12,  -595,  -329,
  -683,  -528,  -548,  -553,  -695,  -555,  -531,  -550,  -695,  -552,
  -533,  -695,  -536,  -695,  -538,  -541,  -695,  -542,  -695,  -565,
    -9,   -19,  -695,   -29,  -279,  -695,  -695,  -256,  -695,  -695,
  -695,  -695,  -418,  -695,  -258,  -260,  -695,  -695,   -64,  -255,
  -411,  -695,  -695,   -66,  -412,  -307,  -685,  -670,  -671,  -670,
  -671,  -683,  -695,  -695,  -426,   -58,  -407,  -423,  -253,  -695,
  -384,  -695,  -303,  -270,  -269,  -273,  -695,  -662,  -663,  -695,
   -14,   -76,  -695,   -82,   -88,  -683,  -670,  -671,  -254,  -674,
   -99,  -695,   -84,  -695,  -204,  -218,  -683,  -694,  -694,  -292,
  -294,  -296,  -687,  -695,  -683,  -695,  -598,  -599,  -695,  -695,
  -609,  -695,  -612,  -695,  -614,  -695,  -350,  -695,  -352,  -354,
  -361,  -683,  -630,  -640,  -650,  -654,  -694,  -341,  -694,   -54,
  -342,  -343,  -315,  -316,  -695,  -695,  -431,  -318,  -695,  -683,
  -670,  -671,  -674,  -298,   -12,  -111,  -112,  -115,  -683,   -12,
  -695,  -323,  -695,   -12,  -617,  -617,  -695,  -658,  -554,  -557,
  -558,  -559,  -560,  -561,   -12,  -532,  -535,  -537,  -540,  -544,
  -546,  -125,  -277,  -695,  -683,  -670,  -671,  -671,  -670,   -44,
  -252,  -695,  -686,  -270,   -38,  -200,   -39,  -201,   -65,   -40,
  -203,   -41,  -202,   -67,  -695,  -695,  -695,  -695,  -418,  -695,
  -405,  -384,  -409,  -408,  -695,  -420,  -385,  -683,  -387,   -12,
  -422,  -264,  -274,  -665,   -80,  -418,   -92,  -306,  -694,  -346,
   -12,  -516,  -694,  -517,  -518,  -249,  -397,  -400,  -402,  -389,
  -695,  -656,  -637,  -655,  -601,  -602,  -602,  -628,  -602,  -602,
  -647,  -602,  -625,  -642,  -683,  -695,  -359,  -695,  -626,  -695,
  -344,  -695,  -695,  -317,  -319,  -695,  -695,   -12,  -418,  -695,
  -418,  -695,  -695,   -12,  -326,  -695,  -683,  -695,  -330,  -695,
  -278,  -418,   -37,  -199,  -259,  -695,  -238,   -12,   -60,  -656,
  -656,  -366,  -368,  -368,  -368,  -383,  -695,  -683,  -625,  -633,
  -634,  -644,  -424,   -10,   -12,  -522,  -347,  -695,  -695,  -520,
   -12,   -12,  -695,  -398,  -597,  -695,  -605,  -695,  -607,  -695,
  -610,  -695,  -613,  -615,  -351,  -353,  -357,  -695,  -362,  -313,
  -695,  -314,  -695,  -436,  -439,  -442,  -443,  -444,  -446,  -448,
  -449,  -496,  -683,  -695,  -695,  -473,  -479,  -480,  -481,  -484,
  -547,  -488,  -489,  -494,  -495,  -695,  -695,  -499,  -500,  -501,
  -502,  -503,  -504,  -505,  -506,  -507,  -395,  -509,  -695,  -695,
  -513,  -273,  -694,  -320,  -322,  -592,  -695,  -328,  -594,  -596,
  -595,  -556,  -427,  -695,  -364,  -365,  -374,  -376,  -695,  -379,
  -695,  -381,  -386,  -695,  -695,  -632,  -695,  -521,   -12,  -585,
  -586,  -695,  -695,  -289,  -519,  -695,  -695,  -683,  -391,  -393,
  -394,  -602,  -602,  -602,  -602,  -355,  -695,  -360,  -695,   -12,
  -432,  -695,  -695,  -440,  -695,  -695,  -683,  -683,  -695,  -461,
  -683,  -457,  -462,  -468,  -695,  -695,  -459,  -547,  -683,  -471,
  -695,  -695,  -483,  -695,  -487,  -492,  -493,  -497,  -498,  -508,
  -510,  -112,  -511,  -428,  -429,  -430,  -324,   -12,  -656,  -635,
  -367,  -368,  -368,  -368,  -368,  -645,  -368,  -388,  -643,  -695,
  -299,  -515,  -256,  -695,  -695,  -299,  -401,  -403,  -390,  -695,
  -695,  -603,  -606,  -608,  -611,  -695,  -358,  -694,   -12,  -437,
  -438,  -441,  -445,  -447,  -683,  -683,  -452,  -683,  -683,  -455,
  -512,  -456,  -477,  -463,  -466,  -469,  -458,  -695,  -460,  -695,
  -474,  -475,  -478,  -482,  -486,  -490,  -491,  -695,  -363,  -695,
  -371,  -695,  -373,  -695,  -377,  -695,  -380,  -382,  -298,  -674,
  -514,  -683,  -670,  -671,  -674,  -298,  -392,  -602,  -356,  -345,
  -694,  -450,  -451,  -453,  -454,  -470,  -464,  -695,  -472,  -695,
  -485,  -331,  -368,  -368,  -368,  -368,  -418,  -604,  -433,  -434,
  -435,  -695,  -467,  -476,  -695,  -369,  -372,  -375,  -378,  -465,
  -368,  -370 ]

clist = [
'39,224,347,320,320,39,284,284,284,339,391,134,134,386,305,120,539,218',
'600,13,567,267,398,591,13,269,346,697,350,351,335,735,355,39,310,310',
'129,210,432,6,320,320,320,552,6,455,435,353,354,275,279,753,13,137,137',
'349,349,503,818,349,268,39,419,420,706,707,271,278,280,459,559,359,375',
'375,375,227,529,134,494,837,13,330,120,116,402,403,404,405,849,852,364',
'674,117,674,542,545,323,840,549,306,337,495,583,586,918,286,286,286',
'883,127,302,349,349,349,349,669,998,39,677,282,295,296,285,285,285,500',
'39,1000,39,836,304,838,441,447,452,809,13,915,341,344,1020,831,2,1055',
'642,13,721,13,516,121,356,663,372,376,1,340,6,893,671,680,677,209,830',
'1037,1038,406,365,6,415,926,617,619,622,622,1007,1100,621,623,408,729',
'667,632,492,333,342,666,388,343,363,604,387,336,413,540,284,338,749',
'863,426,607,608,426,756,430,431,970,885,887,426,503,997,39,550,457,458',
'826,703,900,305,508,901,1081,451,567,1084,1087,491,884,497,461,13,498',
'421,674,674,421,801,39,1043,922,1148,442,421,880,1138,433,704,1025,855',
'284,284,747,456,1105,1106,1078,13,734,284,677,923,400,925,1076,1082',
'886,877,414,425,1083,407,425,683,559,1055,1102,320,1051,425,1103,692',
'837,1152,1126,305,804,822,752,897,305,390,840,661,320,1000,844,1159',
'392,526,39,915,393,655,39,394,418,418,310,39,120,395,396,523,397,587',
'758,764,750,13,835,541,832,13,1044,310,1001,1049,13,532,,1085,1088,1128',
',588,589,39,,513,668,275,349,904,672,279,983,837,,,286,,685,,39,39,13',
',286,,681,527,594,606,496,,684,285,120,519,,798,499,13,13,285,441,447',
'511,610,,302,567,,567,700,302,512,,269,530,974,975,,,815,,1052,15,1053',
'767,515,767,15,514,,521,,,,1048,,134,880,1047,880,,880,643,,,,,739,609',
'638,,567,567,,861,15,,748,865,814,590,631,688,,1129,284,,,,811,,688',
',858,866,867,,,137,757,788,825,860,15,,793,,,674,649,451,774,1093,784',
'786,654,662,,789,791,1101,559,559,,888,,648,,871,442,837,,653,677,320',
'857,1149,,,456,,433,320,,284,,,,,,,,,688,,,,39,,15,649,688,,,,310,,941',
'15,,15,696,451,310,1142,,13,665,,,,451,,716,,817,,,966,1101,880,442',
'880,823,880,1120,880,441,447,811,442,,972,,1108,694,,,,726,848,,728',
',,284,1150,,,,,744,567,673,,284,996,1101,39,1153,530,39,,,,880,,,530',
',,1101,,451,730,941,,13,872,451,13,,39,15,1042,15,,,15,284,924,,442',
'751,702,15,426,,,,442,13,,803,1045,,426,426,,15,134,426,426,,,39,1021',
'451,643,,824,,,888,988,888,320,,,,421,,,,13,771,442,320,,802,421,421',
'643,1090,,421,421,1009,,1010,785,787,137,,779,790,792,310,941,941,738',
'829,716,914,,846,425,1019,310,1028,868,15,,941,1032,15,425,425,,,15',
'425,425,,,968,649,862,,654,,,,,,783,643,,,,859,1089,1107,,1091,643,',
',15,,,,,,349,,,,,39,869,,530,,39,15,15,,39,,,643,,816,134,,,,13,39,895',
'426,,13,899,,,13,1019,,,1019,1019,,,,888,833,13,,833,,,,829,892,418',
'710,712,714,,1133,1134,,,421,896,,,,,,,,39,873,,839,920,841,716,,716',
',,39,,,785,787,792,790,,13,,1146,,,,,,425,,962,13,349,,,,,,,,,,,,889',
',,955,,39,320,,1086,,,39,1140,,,320,1033,829,,,1098,,965,987,13,39,',
'969,,995,13,,881,,1005,716,,375,,1121,,1039,39,,13,,990,,39,39,,,873',
',,,882,15,,,,13,643,,,994,,13,13,,,,,,,,1131,1132,,,955,,955,,,,,955',
',,,,,955,955,,,,,,,320,,1097,,,,,,,,,,,,,,1061,,345,,1079,1080,,716',
'688,716,1068,15,,,15,375,,,,39,,1077,,1063,,,,,,,643,349,349,643,,15',
',1002,13,1003,39,1004,,,955,,955,955,955,889,,,889,955,889,,889,,,13',
',955,,,15,,955,955,15,,284,,,,15,15,716,,39,15,15,833,,,881,,881,,881',
',1130,,,451,,,,13,451,,643,643,906,908,,910,912,,913,39,1054,,1056,',
',,,442,977,979,981,,,,,,,16,13,,955,,16,,643,955,,,,,,,,,,,,228,,,,416',
'429,,,,228,228,228,,16,311,311,,,,,,955,,955,,15,,,,,15,,,,15,955,,',
'889,,889,16,889,,889,15,228,228,,,228,360,370,370,,1127,,,,,,,15,,,',
',,,,881,,881,,881,,881,,,,505,,507,889,,509,510,,,,15,,,,1143,,1144',
'16,1145,,,15,228,228,228,228,16,,16,,,,,,,881,,,,,,1071,1072,1073,1074',
',,,,,,,,,,,,,15,1160,1110,1112,1114,1116,15,1117,,,,,,,,,,,,,15,,,,',
',947,,,17,,,,,17,,,15,,,,,,15,15,,,,,,,,,16,228,423,228,228,423,228',
',,17,313,313,423,228,228,,,,634,,,,,,,,16,,,,,,,,,,,17,,,1155,1156,1157',
'1158,,,,362,371,371,947,,947,,,,1147,947,1161,,,228,228,947,947,,,,',
',228,,,,,,,,15,,,,,,,,,,16,,,,16,17,,,311,16,,15,,,17,675,17,345,948',
'678,,,,,,311,,,,,,,,,,,,16,,,,,,947,,947,947,947,,15,,,947,228,16,16',
'675,,,345,947,,,,,947,947,,,,,,949,,228,,,,,,15,,,,722,,,,,,228,,,,',
'948,,948,,17,,424,948,,424,429,,,948,948,,424,,,,,,,,,,,,,,17,,,,947',
',,,,947,,,,,,,,,,,,,,772,949,,949,,,,,949,675,345,,,,949,949,228,,,947',
',947,,,,,,,948,,948,948,948,947,950,,,948,,17,,812,,17,813,948,,313',
'17,,948,948,,,,,,,,,,,,821,313,16,,,,,,,,311,,228,17,,,,843,311,949',
',949,949,949,,,,228,949,,17,17,,,,,949,,,,,949,949,,,,,,950,,950,948',
',,,950,948,,,,,950,950,,,,,,,,951,,,16,,870,16,,,,,,,228,,,,,,948,,948',
',228,,,,16,,,,,,948,,949,,,,,949,,,,,,,,,,,,,,,,423,228,,950,16,950',
'950,950,,,423,423,950,,,423,423,949,,949,950,951,,951,,950,950,,951',
',,949,961,,951,951,,,,,,,,,,,311,,,,345,,,,,,,311,,,,,,17,,,,,,,,313',
',,,,,,,313,,,,,,,,,,950,,,,,950,,,,,,,,951,,951,951,951,,16,,,951,,16',
'228,,,16,,951,,,,,951,951,,950,16,950,,,,,17,,,17,,,,950,,,,423,,,,',
',,,,,,,,17,,,,,,,763,952,,,,,,,16,,,,,,,,,,,16,,,424,951,,,17,,951,',
',,424,424,,,,424,424,,,,,,,,,,,,228,,,,,,16,,,,,951,16,951,,,,,313,',
',,,,,951,16,,952,313,952,,,,,952,,,985,,26,952,952,16,,26,,991,,16,16',
',,,,,,,,,26,,,,,,,,,26,26,26,,26,,,,,,,17,,,,,17,,,,17,,,,,,,,,,,17',
'26,,,,,26,26,,952,26,952,952,952,,,,424,952,,,,,,953,,952,,,,,952,952',
'1058,,,,16,,,,,,,,17,,,,,,,,,,,17,26,16,,228,228,26,26,26,26,26,,26',
',,,,,,,,,,,,,,,,,,,,,,,,17,,952,16,,,17,952,953,,953,954,,,,953,,,228',
',17,953,953,,,,,,,,,,371,,16,,,17,,,952,993,952,17,17,,,,,,,,,,952,',
',,26,26,26,26,26,26,26,,,,,,26,26,26,,,,,,,,,,,,26,,,,954,953,954,953',
'953,953,,954,,,953,,,954,954,,,,953,,,,,953,953,,,,,,,26,26,,,,,,,371',
'26,,,17,,,,,,,,,,,,,,,26,,,,26,,17,,,26,,,,,,,,,,,,,,954,,954,954,954',
'29,953,,,954,29,953,,,26,,,954,,,,17,954,954,,29,,,,,26,26,26,,29,29',
'29,,29,,,,,,953,,953,,,,,26,17,,,,,,953,,,,,,,,29,26,,,,29,29,,,29,',
',,,,,,,,,954,,,,,954,,,,,,,,,,,,,,,,,,,38,,,,,38,,,,,,,29,,954,,954',
'29,29,29,29,29,,29,,,,,954,,,26,,38,309,309,,,,,,,,,,,,,,,,,,,,,,,,',
',38,,,,,,,,,,358,374,374,374,,,,,,26,,,,,,,,,,26,,,,,,,,,,,,,,,26,29',
'29,29,29,29,29,29,,,,,38,29,29,29,,,,,,38,,38,,,,29,,,,,,,,,,,,,,,,',
',,26,,,26,,,,,,,26,,,,,,29,29,,,26,,,,26,29,,,,,,,,,,,,,,,,,,29,,,,29',
',,,,29,26,26,,,26,,,38,,,26,26,,,,26,26,,,,,,,,,,,29,,,,,,38,,,,,,,',
',,29,29,29,,,,,,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,38,',
',,38,,,,309,38,,,,26,,,,,26,26,,,26,,,309,,,,,,,,26,,,,38,,,,,,,,,,',
',,26,,,,38,38,,,,29,,,,,,,,,,,,,,,,,,,26,,,,,,,,,,,26,,,,,,,,,,,,,,',
',,,,29,,,,,,,,,,29,,26,,,,,,26,,,,,,26,29,,,,,,,,,,,,,26,,,,,,,,,,,',
',,,,,26,,,,,,26,26,,,,,,,,,29,,,29,,,,,,,29,,,,,,,,,,29,,,,29,,,,,,',
',,,38,,,,,,,,309,,,,,,,,309,,,29,29,,,29,,,,,,29,29,,,,29,29,,,,,,,',
',26,,,,,,,,,,,,,,,,,,,,,26,,26,26,,,38,,,38,,,,,,,,,,,,,,,,,,,,,38,',
',,,,,,26,,,,,,,,,,,,,,,26,,,,,,,,,29,38,,,,29,29,26,,29,,,,,,,,,,,29',
',,,,,,,,,,,,,,,,29,,,,,,309,,,,,,,,,,,309,,,,,,,,,,,29,,,,,,,,,,,29',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,29,,,38,,,29,38,,,,,29,,,,,,38,,,,,',
',,29,,,,,,,,,,,,,,,,,29,,,,,,29,29,235,,,,,,,,,283,283,283,38,,,,,,',
',,328,329,38,331,332,,334,,,,,,,,,,,,,,,283,283,,,,,,,,,,,,,,,,,38,',
',,,,38,,,,,,,,,,,,,,38,,,,,,29,,,,,,374,,,,,38,,,,989,,38,38,,,29,,29',
'29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,29,,,,,,,,,,,',
',,,,29,,,,,,,,,,,374,,,,38,283,428,,,434,283,,,,,,434,,,,,,,,,38,,,',
'235,,,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483',
'484,485,486,487,488,489,,,,,490,,,,,38,,283,283,,,,,,,,283,,,,,,,283',
',283,,,283,283,,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,535,,536,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,283,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,283,,434,434',
'434,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,283,,283,,283,,,,,,,,,,,,,,,,283',
',,,,,,,,434,,,695,,,,,,,,,283,,,283,,,,,,,,,,,,,,,,,,,,,,,,,283,,,,',
',,,,,,,,,,,,,,,,283,283,,,,,,,,,,283,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'283,434,283,,,,780,,,283,283,434,434,,,,434,434,,,,,,,,,,,,,,,,,,,,',
',,,283,,,283,,,,,,,,,,,,,,,,,,,283,,,,,,,,,,,,,,,,,283,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,283,,,,,,,,434,,,,,,,,,',
',,,434,434,434,434,,876,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,283,,,,,,,,,,,,,,,,,,283,434,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,283' ]
        racc_goto_table = arr = ::Array.new(4259, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'60,34,96,71,71,60,39,39,39,75,173,64,64,63,10,103,9,32,61,22,200,140',
'173,99,22,32,94,11,18,18,34,100,18,60,60,60,16,16,27,7,71,71,71,139',
'7,27,30,36,36,79,79,104,22,66,66,25,25,81,12,25,42,60,23,23,122,122',
'44,44,44,54,195,60,60,60,60,21,58,64,45,201,22,69,103,4,18,18,18,18',
'98,12,22,82,6,82,77,77,57,205,77,56,7,30,97,97,118,78,78,78,127,8,52',
'25,25,25,25,46,133,60,209,51,51,51,76,76,76,54,60,134,60,128,53,128',
'43,43,43,129,22,115,78,78,158,121,2,206,31,22,117,22,54,5,4,143,62,62',
'1,76,7,13,143,15,209,17,131,175,175,7,20,7,24,160,186,186,186,186,118',
'169,185,185,26,37,48,67,43,72,74,80,92,93,101,102,105,106,10,107,39',
'108,109,110,19,111,112,19,113,25,25,114,119,125,19,81,132,60,135,25',
'25,136,138,141,10,173,142,158,64,200,158,158,144,128,146,32,22,147,22',
'82,82,22,150,60,151,152,153,79,22,121,169,68,139,160,154,39,39,61,68',
'175,175,155,22,99,39,209,156,5,159,118,162,131,129,21,21,164,2,21,58',
'195,206,171,71,127,21,172,58,201,169,133,10,46,177,9,178,10,181,205',
'30,71,134,117,169,182,34,60,115,183,54,60,184,76,76,60,60,103,187,188',
'32,189,18,190,191,194,22,199,34,203,22,12,60,128,204,22,32,,160,160',
'118,,10,10,60,,7,54,79,25,122,54,79,131,201,,,78,,30,,60,60,22,,78,',
'54,69,32,25,51,,54,76,103,57,,31,51,22,22,76,43,43,4,25,,52,200,,200',
'54,52,6,,32,56,122,122,,,31,,128,28,128,186,53,186,28,8,,53,,,,121,',
'64,121,104,121,,121,34,,,,,30,42,32,,200,200,,9,28,,30,9,58,4,16,43',
',98,39,,,,81,,43,,31,139,139,,,66,54,45,77,31,28,,45,,,82,79,64,30,168',
'27,27,79,34,,27,27,168,195,195,,200,,44,,31,79,201,,44,209,71,97,12',
',,68,,68,71,,39,,,,,,,,,43,,,,60,,28,79,43,,,,60,,174,28,,28,25,64,60',
'128,,22,44,,,,64,,116,,54,,,9,168,121,79,121,23,121,11,121,43,43,81',
'79,,9,,122,68,,,,10,54,,10,,,39,100,,,,,36,200,78,,39,9,168,60,168,56',
'60,,,,121,,,56,,,168,,64,103,174,,22,27,64,22,,60,28,61,28,,,28,39,157',
',79,103,78,28,19,,,,79,22,,94,99,,19,19,,28,64,19,19,,,60,31,64,34,',
'75,,,200,97,200,71,,,,22,,,,22,16,79,71,,140,22,22,34,61,,22,22,97,',
'97,68,68,66,,7,68,68,60,174,174,76,34,116,54,,116,21,157,60,157,63,28',
',174,157,28,21,21,,,28,21,21,,,54,79,18,,79,,,,,,78,34,,,,10,31,9,,31',
'34,,,28,,,,,,25,,,,,60,10,,56,,60,28,28,,60,,,34,,56,64,,,,22,60,75',
'19,,22,75,,,22,157,,,157,157,,,,200,123,22,,123,,,,34,10,76,198,198',
'198,,31,31,,,22,10,,,,,,,,60,68,,126,18,126,116,,116,,,60,,,68,68,68',
'68,,22,,31,,,,,,21,,10,22,25,,,,,,,,,,,,202,,,60,,60,71,,54,,,60,157',
',,71,173,34,,,54,,103,10,22,60,,103,,10,22,,123,,116,116,,60,,30,,96',
'60,,22,,60,,60,60,,,68,,,,126,28,,,,22,34,,,22,,22,22,,,,,,,,54,54,',
',60,,60,,,,,60,,,,,,60,60,,,,,,,71,,173,,,,,,,,,,,,,,10,,73,,18,18,',
'116,43,116,34,28,,,28,60,,,,60,,10,,32,,,,,,,34,25,25,34,,28,,126,22',
'126,60,126,,,60,,60,60,60,202,,,202,60,202,,202,,,22,,60,,,28,,60,60',
'28,,39,,,,28,28,116,,60,28,28,123,,,123,,123,,123,,10,,,64,,,,22,64',
',34,34,198,198,,198,198,,198,60,126,,126,,,,,79,124,124,124,,,,,,,29',
'22,,60,,29,,34,60,,,,,,,,,,,,29,,,,73,73,,,,29,29,29,,29,29,29,,,,,',
'60,,60,,28,,,,,28,,,,28,60,,,202,,202,29,202,,202,28,29,29,,,29,29,29',
'29,,126,,,,,,,28,,,,,,,,123,,123,,123,,123,,,,73,,73,202,,73,73,,,,28',
',,,126,,126,29,126,,,28,29,29,29,29,29,,29,,,,,,,123,,,,,,198,198,198',
'198,,,,,,,,,,,,,,28,126,124,124,124,124,28,124,,,,,,,,,,,,,28,,,,,,84',
',,33,,,,,33,,,28,,,,,,28,28,,,,,,,,,29,29,29,29,29,29,29,,,33,33,33',
'29,29,29,,,,73,,,,,,,,29,,,,,,,,,,,33,,,124,124,124,124,,,,33,33,33',
'84,,84,,,,198,84,124,,,29,29,84,84,,,,,,29,,,,,,,,28,,,,,,,,,,29,,,',
'29,33,,,29,29,,28,,,33,73,33,73,85,73,,,,,,29,,,,,,,,,,,,29,,,,,,84',
',84,84,84,,28,,,84,29,29,29,73,,,73,84,,,,,84,84,,,,,,86,,29,,,,,,28',
',,,73,,,,,,29,,,,,85,,85,,33,,33,85,,33,73,,,85,85,,33,,,,,,,,,,,,,',
'33,,,,84,,,,,84,,,,,,,,,,,,,,73,86,,86,,,,,86,73,73,,,,86,86,29,,,84',
',84,,,,,,,85,,85,85,85,84,87,,,85,,33,,73,,33,73,85,,33,33,,85,85,,',
',,,,,,,,,73,33,29,,,,,,,,29,,29,33,,,,73,29,86,,86,86,86,,,,29,86,,33',
'33,,,,,86,,,,,86,86,,,,,,87,,87,85,,,,87,85,,,,,87,87,,,,,,,,88,,,29',
',73,29,,,,,,,29,,,,,,85,,85,,29,,,,29,,,,,,85,,86,,,,,86,,,,,,,,,,,',
',,,,29,29,,87,29,87,87,87,,,29,29,87,,,29,29,86,,86,87,88,,88,,87,87',
',88,,,86,73,,88,88,,,,,,,,,,,29,,,,73,,,,,,,29,,,,,,33,,,,,,,,33,,,',
',,,,33,,,,,,,,,,87,,,,,87,,,,,,,,88,,88,88,88,,29,,,88,,29,29,,,29,',
'88,,,,,88,88,,87,29,87,,,,,33,,,33,,,,87,,,,29,,,,,,,,,,,,,33,,,,,,',
'33,89,,,,,,,29,,,,,,,,,,,29,,,33,88,,,33,,88,,,,33,33,,,,33,33,,,,,',
',,,,,,29,,,,,,29,,,,,88,29,88,,,,,33,,,,,,,88,29,,89,33,89,,,,,89,,',
'29,,47,89,89,29,,47,,29,,29,29,,,,,,,,,,47,,,,,,,,,47,47,47,,47,,,,',
',,33,,,,,33,,,,33,,,,,,,,,,,33,47,,,,,47,47,,89,47,89,89,89,,,,33,89',
',,,,,90,,89,,,,,89,89,29,,,,29,,,,,,,,33,,,,,,,,,,,33,47,29,,29,29,47',
'47,47,47,47,,47,,,,,,,,,,,,,,,,,,,,,,,,,33,,89,29,,,33,89,90,,90,91',
',,,90,,,29,,33,90,90,,,,,,,,,,33,,29,,,33,,,89,33,89,33,33,,,,,,,,,',
'89,,,,47,47,47,47,47,47,47,,,,,,47,47,47,,,,,,,,,,,,47,,,,91,90,91,90',
'90,90,,91,,,90,,,91,91,,,,90,,,,,90,90,,,,,,,47,47,,,,,,,33,47,,,33',
',,,,,,,,,,,,,,47,,,,47,,33,,,47,,,,,,,,,,,,,,91,,91,91,91,50,90,,,91',
'50,90,,,47,,,91,,,,33,91,91,,50,,,,,47,47,47,,50,50,50,,50,,,,,,90,',
'90,,,,,47,33,,,,,,90,,,,,,,,50,47,,,,50,50,,,50,,,,,,,,,,,91,,,,,91',
',,,,,,,,,,,,,,,,,,59,,,,,59,,,,,,,50,,91,,91,50,50,50,50,50,,50,,,,',
'91,,,47,,59,59,59,,,,,,,,,,,,,,,,,,,,,,,,,,59,,,,,,,,,,59,59,59,59,',
',,,,47,,,,,,,,,,47,,,,,,,,,,,,,,,47,50,50,50,50,50,50,50,,,,,59,50,50',
'50,,,,,,59,,59,,,,50,,,,,,,,,,,,,,,,,,,47,,,47,,,,,,,47,,,,,,50,50,',
',47,,,,47,50,,,,,,,,,,,,,,,,,,50,,,,50,,,,,50,47,47,,,47,,,59,,,47,47',
',,,47,47,,,,,,,,,,,50,,,,,,59,,,,,,,,,,50,50,50,,,,,,,,,,,,,,,,,,,50',
',,,,,,,,,,,,,,,50,,,,,,,,,,,,,,,59,,,,59,,,,59,59,,,,47,,,,,47,47,,',
'47,,,59,,,,,,,,47,,,,59,,,,,,,,,,,,,47,,,,59,59,,,,50,,,,,,,,,,,,,,',
',,,,47,,,,,,,,,,,47,,,,,,,,,,,,,,,,,,,50,,,,,,,,,,50,,47,,,,,,47,,,',
',,47,50,,,,,,,,,,,,,47,,,,,,,,,,,,,,,,,47,,,,,,47,47,,,,,,,,,50,,,50',
',,,,,,50,,,,,,,,,,50,,,,50,,,,,,,,,,59,,,,,,,,59,,,,,,,,59,,,50,50,',
',50,,,,,,50,50,,,,50,50,,,,,,,,,47,,,,,,,,,,,,,,,,,,,,,47,,47,47,,,59',
',,59,,,,,,,,,,,,,,,,,,,,,59,,,,,,,,47,,,,,,,,,,,,,,,47,,,,,,,,,50,59',
',,,50,50,47,,50,,,,,,,,,,,50,,,,,,,,,,,,,,,,,50,,,,,,59,,,,,,,,,,,59',
',,,,,,,,,,50,,,,,,,,,,,50,,,,,,,,,,,,,,,,,,,,,,,,,,,,,59,,50,,,59,,',
'50,59,,,,,50,,,,,,59,,,,,,,,50,,,,,,,,,,,,,,,,,50,,,,,,50,50,35,,,,',
',,,,35,35,35,59,,,,,,,,,35,35,59,35,35,,35,,,,,,,,,,,,,,,35,35,,,,,',
',,,,,,,,,,,59,,,,,,59,,,,,,,,,,,,,,59,,,,,,50,,,,,,59,,,,,59,,,,59,',
'59,59,,,50,,50,50,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,50,,,,,,,,,,,,,',
',50,,,,,,,,,,,,,,,,50,,,,,,,,,,,59,,,,59,35,35,,,35,35,,,,,,35,,,,,',
',,,59,,,,35,,,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35',
'35,35,35,35,,,,,35,,,,,59,,35,35,,,,,,,,35,,,,,,,35,,35,,,35,35,,,,',
',,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,35,35,35,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,35,,35,,35,,,,,,,,,,,,,,,,35,,,,,,,,,35,,,35,,,,,,,,',
'35,,,35,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35,35,,,,,,,',
',,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,35,,,,35,,,35,35,35,35,,,',
'35,35,,,,,,,,,,,,,,,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,',
',,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35',
',,,,,,,35,,,,,,,,,,,,,35,35,35,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(4259, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   154,   142,   nil,    80,   144,    89,    39,   102,  -320,
   -19,  -511,  -639,  -661,   nil,  -353,    28,   152,   -38,   -15,
    95,    55,    19,  -150,   -44,   -11,    49,  -178,   397,  1096,
  -171,  -291,     1,  1283,   -18,  3196,   -21,  -408,   nil,   -23,
   nil,   nil,    36,   -86,    40,  -193,  -382,  1987,  -313,   nil,
  2314,    90,    77,    97,  -156,   nil,    65,    61,  -248,  2419,
     0,  -350,    80,   -61,     3,   nil,    45,  -231,    29,    38,
   nil,   -31,   137,   908,   122,   -53,    93,  -246,    76,    23,
  -307,  -229,  -411,   nil,   425,   558,   612,   722,   821,  1043,
  1216,  1296,   112,   124,   -38,   nil,   -63,  -248,  -638,  -333,
  -559,   117,  -183,    12,  -557,   116,   131,  -144,   134,  -408,
  -554,  -177,  -186,  -407,  -663,  -708,   -30,  -422,  -743,  -601,
   nil,  -564,  -489,    77,   205,  -600,   101,  -699,  -580,  -535,
   nil,  -542,  -692,  -786,  -775,  -136,  -488,   nil,  -334,  -305,
    -1,  -610,  -608,  -340,   -40,   nil,   -48,   -46,   nil,   nil,
  -428,  -724,  -616,  -890,  -488,  -755,  -595,  -240,  -792,  -593,
  -686,   nil,  -750,   nil,  -746,   nil,   nil,   nil,  -555,  -855,
   nil,  -756,  -752,   -72,  -333,  -782,   nil,  -412,  -534,   nil,
   nil,   210,   212,   215,   217,  -218,  -222,   222,   222,   223,
  -299,  -299,   nil,   nil,  -288,  -278,   nil,   nil,   236,  -390,
  -328,  -630,    45,  -384,  -647,  -614,  -835,   nil,   nil,  -386 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   357,   300,   nil,   nil,
   538,   nil,   850,   nil,   297,   298,   nil,   nil,   nil,    11,
    12,    18,   233,   nil,   nil,    14,   nil,   422,   234,   327,
   nil,   nil,   602,   232,   460,    21,   nil,   nil,   352,    22,
    23,    24,   nil,   691,   nil,   nil,   nil,   317,   nil,    25,
   314,   436,    32,   nil,   nil,    34,    37,    36,   nil,   229,
   230,   369,   nil,   136,   444,   135,    79,   nil,   427,    95,
    46,    49,   265,   289,   nil,   819,   437,   nil,   438,   449,
   650,   501,   287,   273,    50,    51,    52,    53,    54,    55,
    56,    57,    58,   nil,   274,    64,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   584,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   718,   566,   nil,   719,  1050,
   879,   554,   nil,   555,   nil,   nil,   556,   nil,   558,   nil,
   806,   nil,   nil,   nil,   564,   nil,   nil,   348,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   448,   nil,   nil,   670,   664,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1092,   nil,  1023,
   nil,   927,   943,   928,   929,   930,   931,  1022,  1024,   nil,
   936,   937,   938,   nil,   575,   942,   944,   nil,   nil,    78,
    80,    81,   nil,   nil,   nil,   nil,   612,   nil,   nil,   nil,
   nil,   nil,    91,    92,   nil,   834,   755,   553,   nil,   557,
   842,   569,   571,   572,   890,   576,   891,   579,   582,   292 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 150, :_reduce_none,
  2, 151, :_reduce_2,
  0, 152, :_reduce_3,
  1, 152, :_reduce_4,
  3, 152, :_reduce_5,
  2, 152, :_reduce_6,
  1, 154, :_reduce_none,
  2, 154, :_reduce_8,
  3, 157, :_reduce_9,
  4, 158, :_reduce_10,
  2, 159, :_reduce_11,
  0, 163, :_reduce_12,
  1, 163, :_reduce_13,
  3, 163, :_reduce_14,
  2, 163, :_reduce_15,
  1, 164, :_reduce_none,
  2, 164, :_reduce_17,
  0, 175, :_reduce_18,
  4, 156, :_reduce_19,
  3, 156, :_reduce_20,
  3, 156, :_reduce_21,
  3, 156, :_reduce_22,
  2, 156, :_reduce_23,
  3, 156, :_reduce_24,
  3, 156, :_reduce_25,
  3, 156, :_reduce_26,
  3, 156, :_reduce_27,
  3, 156, :_reduce_28,
  4, 156, :_reduce_29,
  1, 156, :_reduce_none,
  3, 156, :_reduce_31,
  3, 156, :_reduce_32,
  3, 156, :_reduce_33,
  1, 156, :_reduce_none,
  3, 168, :_reduce_35,
  3, 168, :_reduce_36,
  6, 168, :_reduce_37,
  5, 168, :_reduce_38,
  5, 168, :_reduce_39,
  5, 168, :_reduce_40,
  5, 168, :_reduce_41,
  3, 168, :_reduce_42,
  1, 176, :_reduce_none,
  3, 176, :_reduce_44,
  1, 176, :_reduce_none,
  1, 174, :_reduce_none,
  3, 174, :_reduce_47,
  3, 174, :_reduce_48,
  3, 174, :_reduce_49,
  2, 174, :_reduce_50,
  1, 174, :_reduce_none,
  1, 167, :_reduce_none,
  0, 187, :_reduce_53,
  3, 185, :_reduce_54,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 189, :_reduce_none,
  4, 189, :_reduce_58,
  0, 197, :_reduce_59,
  4, 194, :_reduce_60,
  1, 196, :_reduce_none,
  2, 188, :_reduce_62,
  3, 188, :_reduce_63,
  4, 188, :_reduce_64,
  5, 188, :_reduce_65,
  4, 188, :_reduce_66,
  5, 188, :_reduce_67,
  2, 188, :_reduce_68,
  2, 188, :_reduce_69,
  2, 188, :_reduce_70,
  2, 188, :_reduce_71,
  2, 188, :_reduce_72,
  1, 169, :_reduce_73,
  3, 169, :_reduce_74,
  1, 202, :_reduce_75,
  3, 202, :_reduce_76,
  1, 201, :_reduce_none,
  2, 201, :_reduce_78,
  3, 201, :_reduce_79,
  5, 201, :_reduce_80,
  2, 201, :_reduce_81,
  4, 201, :_reduce_82,
  2, 201, :_reduce_83,
  4, 201, :_reduce_84,
  1, 201, :_reduce_85,
  3, 201, :_reduce_86,
  1, 205, :_reduce_none,
  3, 205, :_reduce_88,
  2, 204, :_reduce_89,
  3, 204, :_reduce_90,
  1, 207, :_reduce_91,
  3, 207, :_reduce_92,
  1, 206, :_reduce_93,
  1, 206, :_reduce_94,
  4, 206, :_reduce_95,
  3, 206, :_reduce_96,
  3, 206, :_reduce_97,
  3, 206, :_reduce_98,
  3, 206, :_reduce_99,
  2, 206, :_reduce_100,
  1, 206, :_reduce_101,
  1, 171, :_reduce_102,
  1, 171, :_reduce_103,
  4, 171, :_reduce_104,
  3, 171, :_reduce_105,
  3, 171, :_reduce_106,
  3, 171, :_reduce_107,
  3, 171, :_reduce_108,
  2, 171, :_reduce_109,
  1, 171, :_reduce_110,
  1, 210, :_reduce_111,
  1, 210, :_reduce_none,
  2, 211, :_reduce_113,
  1, 211, :_reduce_114,
  3, 211, :_reduce_115,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 165, :_reduce_121,
  1, 165, :_reduce_none,
  1, 166, :_reduce_123,
  0, 216, :_reduce_124,
  4, 166, :_reduce_125,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  3, 184, :_reduce_197,
  3, 184, :_reduce_198,
  6, 184, :_reduce_199,
  5, 184, :_reduce_200,
  5, 184, :_reduce_201,
  5, 184, :_reduce_202,
  5, 184, :_reduce_203,
  4, 184, :_reduce_204,
  3, 184, :_reduce_205,
  3, 184, :_reduce_206,
  3, 184, :_reduce_207,
  2, 184, :_reduce_208,
  2, 184, :_reduce_209,
  2, 184, :_reduce_210,
  2, 184, :_reduce_211,
  3, 184, :_reduce_212,
  3, 184, :_reduce_213,
  3, 184, :_reduce_214,
  3, 184, :_reduce_215,
  3, 184, :_reduce_216,
  3, 184, :_reduce_217,
  4, 184, :_reduce_218,
  2, 184, :_reduce_219,
  2, 184, :_reduce_220,
  3, 184, :_reduce_221,
  3, 184, :_reduce_222,
  3, 184, :_reduce_223,
  3, 184, :_reduce_224,
  1, 184, :_reduce_none,
  3, 184, :_reduce_226,
  3, 184, :_reduce_227,
  3, 184, :_reduce_228,
  3, 184, :_reduce_229,
  3, 184, :_reduce_230,
  2, 184, :_reduce_231,
  2, 184, :_reduce_232,
  3, 184, :_reduce_233,
  3, 184, :_reduce_234,
  3, 184, :_reduce_235,
  3, 184, :_reduce_236,
  3, 184, :_reduce_237,
  6, 184, :_reduce_238,
  1, 184, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  3, 219, :_reduce_244,
  3, 219, :_reduce_245,
  1, 222, :_reduce_none,
  1, 223, :_reduce_none,
  2, 223, :_reduce_none,
  4, 223, :_reduce_249,
  2, 223, :_reduce_250,
  1, 217, :_reduce_none,
  3, 217, :_reduce_252,
  3, 228, :_reduce_253,
  0, 229, :_reduce_254,
  1, 229, :_reduce_none,
  0, 179, :_reduce_256,
  1, 179, :_reduce_none,
  2, 179, :_reduce_none,
  4, 179, :_reduce_259,
  2, 179, :_reduce_260,
  1, 200, :_reduce_261,
  2, 200, :_reduce_262,
  2, 200, :_reduce_263,
  4, 200, :_reduce_264,
  1, 200, :_reduce_265,
  0, 232, :_reduce_266,
  2, 193, :_reduce_267,
  2, 231, :_reduce_268,
  2, 230, :_reduce_269,
  0, 230, :_reduce_270,
  1, 225, :_reduce_271,
  2, 225, :_reduce_272,
  3, 225, :_reduce_273,
  4, 225, :_reduce_274,
  1, 173, :_reduce_275,
  1, 173, :_reduce_none,
  3, 172, :_reduce_277,
  4, 172, :_reduce_278,
  2, 172, :_reduce_279,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_290,
  0, 255, :_reduce_291,
  4, 220, :_reduce_292,
  0, 256, :_reduce_293,
  4, 220, :_reduce_294,
  0, 257, :_reduce_295,
  4, 220, :_reduce_296,
  3, 220, :_reduce_297,
  3, 220, :_reduce_298,
  2, 220, :_reduce_299,
  3, 220, :_reduce_300,
  3, 220, :_reduce_301,
  1, 220, :_reduce_302,
  4, 220, :_reduce_303,
  3, 220, :_reduce_304,
  1, 220, :_reduce_305,
  5, 220, :_reduce_306,
  4, 220, :_reduce_307,
  3, 220, :_reduce_308,
  2, 220, :_reduce_309,
  1, 220, :_reduce_none,
  2, 220, :_reduce_311,
  2, 220, :_reduce_312,
  6, 220, :_reduce_313,
  6, 220, :_reduce_314,
  4, 220, :_reduce_315,
  4, 220, :_reduce_316,
  5, 220, :_reduce_317,
  4, 220, :_reduce_318,
  5, 220, :_reduce_319,
  6, 220, :_reduce_320,
  0, 258, :_reduce_321,
  6, 220, :_reduce_322,
  0, 259, :_reduce_323,
  7, 220, :_reduce_324,
  0, 260, :_reduce_325,
  5, 220, :_reduce_326,
  0, 261, :_reduce_327,
  6, 220, :_reduce_328,
  0, 262, :_reduce_329,
  0, 263, :_reduce_330,
  9, 220, :_reduce_331,
  1, 220, :_reduce_332,
  1, 220, :_reduce_333,
  1, 220, :_reduce_334,
  1, 220, :_reduce_335,
  3, 220, :_reduce_336,
  1, 178, :_reduce_none,
  1, 199, :_reduce_338,
  1, 246, :_reduce_none,
  1, 246, :_reduce_none,
  2, 246, :_reduce_341,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 247, :_reduce_none,
  5, 247, :_reduce_345,
  1, 161, :_reduce_none,
  2, 161, :_reduce_347,
  1, 250, :_reduce_none,
  1, 250, :_reduce_none,
  1, 264, :_reduce_350,
  3, 264, :_reduce_351,
  1, 267, :_reduce_352,
  3, 267, :_reduce_353,
  1, 266, :_reduce_none,
  4, 266, :_reduce_355,
  6, 266, :_reduce_356,
  3, 266, :_reduce_357,
  5, 266, :_reduce_358,
  2, 266, :_reduce_359,
  4, 266, :_reduce_360,
  1, 266, :_reduce_361,
  3, 266, :_reduce_362,
  4, 268, :_reduce_363,
  2, 268, :_reduce_364,
  2, 268, :_reduce_365,
  1, 268, :_reduce_366,
  2, 273, :_reduce_367,
  0, 273, :_reduce_368,
  6, 274, :_reduce_369,
  8, 274, :_reduce_370,
  4, 274, :_reduce_371,
  6, 274, :_reduce_372,
  4, 274, :_reduce_373,
  2, 274, :_reduce_none,
  6, 274, :_reduce_375,
  2, 274, :_reduce_376,
  4, 274, :_reduce_377,
  6, 274, :_reduce_378,
  2, 274, :_reduce_379,
  4, 274, :_reduce_380,
  2, 274, :_reduce_381,
  4, 274, :_reduce_382,
  1, 274, :_reduce_none,
  0, 278, :_reduce_384,
  1, 278, :_reduce_385,
  3, 279, :_reduce_386,
  1, 279, :_reduce_387,
  4, 279, :_reduce_388,
  1, 280, :_reduce_389,
  4, 280, :_reduce_390,
  1, 281, :_reduce_391,
  3, 281, :_reduce_392,
  1, 282, :_reduce_393,
  1, 282, :_reduce_none,
  0, 286, :_reduce_395,
  0, 287, :_reduce_396,
  4, 245, :_reduce_397,
  4, 284, :_reduce_398,
  1, 284, :_reduce_399,
  0, 290, :_reduce_400,
  4, 285, :_reduce_401,
  0, 291, :_reduce_402,
  4, 285, :_reduce_403,
  0, 293, :_reduce_404,
  4, 289, :_reduce_405,
  2, 190, :_reduce_406,
  4, 190, :_reduce_407,
  5, 190, :_reduce_408,
  5, 190, :_reduce_409,
  2, 244, :_reduce_410,
  4, 244, :_reduce_411,
  4, 244, :_reduce_412,
  3, 244, :_reduce_413,
  3, 244, :_reduce_414,
  3, 244, :_reduce_415,
  2, 244, :_reduce_416,
  1, 244, :_reduce_417,
  4, 244, :_reduce_418,
  0, 295, :_reduce_419,
  4, 243, :_reduce_420,
  0, 296, :_reduce_421,
  4, 243, :_reduce_422,
  0, 297, :_reduce_423,
  3, 195, :_reduce_424,
  0, 298, :_reduce_425,
  0, 299, :_reduce_426,
  4, 292, :_reduce_427,
  5, 248, :_reduce_428,
  1, 300, :_reduce_429,
  1, 300, :_reduce_none,
  0, 303, :_reduce_431,
  0, 304, :_reduce_432,
  7, 249, :_reduce_433,
  1, 302, :_reduce_434,
  1, 302, :_reduce_none,
  1, 301, :_reduce_436,
  3, 301, :_reduce_437,
  3, 301, :_reduce_438,
  1, 305, :_reduce_none,
  2, 305, :_reduce_440,
  3, 305, :_reduce_441,
  1, 305, :_reduce_442,
  1, 305, :_reduce_443,
  1, 306, :_reduce_none,
  3, 310, :_reduce_445,
  1, 310, :_reduce_none,
  3, 312, :_reduce_447,
  1, 312, :_reduce_none,
  1, 313, :_reduce_none,
  4, 313, :_reduce_450,
  4, 313, :_reduce_451,
  3, 313, :_reduce_452,
  4, 313, :_reduce_453,
  4, 313, :_reduce_454,
  3, 313, :_reduce_455,
  3, 313, :_reduce_456,
  2, 313, :_reduce_457,
  3, 313, :_reduce_458,
  2, 313, :_reduce_459,
  3, 313, :_reduce_460,
  1, 307, :_reduce_461,
  1, 307, :_reduce_462,
  2, 307, :_reduce_463,
  3, 307, :_reduce_464,
  5, 307, :_reduce_465,
  2, 307, :_reduce_466,
  4, 307, :_reduce_467,
  1, 307, :_reduce_none,
  2, 316, :_reduce_469,
  3, 316, :_reduce_470,
  2, 308, :_reduce_471,
  4, 308, :_reduce_472,
  1, 308, :_reduce_473,
  3, 308, :_reduce_474,
  1, 318, :_reduce_475,
  3, 318, :_reduce_476,
  1, 317, :_reduce_none,
  3, 309, :_reduce_478,
  1, 309, :_reduce_479,
  1, 309, :_reduce_480,
  1, 319, :_reduce_481,
  3, 319, :_reduce_482,
  2, 321, :_reduce_483,
  1, 321, :_reduce_484,
  4, 321, :_reduce_485,
  3, 321, :_reduce_486,
  2, 320, :_reduce_487,
  1, 320, :_reduce_488,
  1, 314, :_reduce_none,
  3, 314, :_reduce_490,
  3, 314, :_reduce_491,
  2, 314, :_reduce_492,
  2, 314, :_reduce_493,
  1, 314, :_reduce_none,
  1, 314, :_reduce_none,
  1, 314, :_reduce_none,
  2, 314, :_reduce_497,
  2, 314, :_reduce_498,
  1, 324, :_reduce_none,
  1, 324, :_reduce_none,
  1, 324, :_reduce_none,
  1, 324, :_reduce_none,
  1, 324, :_reduce_none,
  1, 324, :_reduce_none,
  1, 324, :_reduce_none,
  1, 324, :_reduce_none,
  1, 324, :_reduce_507,
  2, 324, :_reduce_508,
  1, 311, :_reduce_509,
  2, 325, :_reduce_510,
  2, 315, :_reduce_511,
  3, 315, :_reduce_512,
  1, 315, :_reduce_513,
  6, 160, :_reduce_514,
  0, 160, :_reduce_515,
  1, 326, :_reduce_516,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  2, 327, :_reduce_519,
  1, 327, :_reduce_none,
  2, 162, :_reduce_521,
  1, 162, :_reduce_none,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 234, :_reduce_525,
  1, 329, :_reduce_526,
  2, 329, :_reduce_527,
  3, 330, :_reduce_528,
  1, 330, :_reduce_529,
  1, 330, :_reduce_530,
  3, 235, :_reduce_531,
  4, 236, :_reduce_532,
  3, 237, :_reduce_533,
  0, 333, :_reduce_534,
  3, 333, :_reduce_535,
  1, 334, :_reduce_536,
  2, 334, :_reduce_537,
  3, 239, :_reduce_538,
  0, 336, :_reduce_539,
  3, 336, :_reduce_540,
  3, 238, :_reduce_541,
  3, 240, :_reduce_542,
  0, 337, :_reduce_543,
  3, 337, :_reduce_544,
  0, 338, :_reduce_545,
  3, 338, :_reduce_546,
  0, 322, :_reduce_547,
  2, 322, :_reduce_548,
  0, 331, :_reduce_549,
  2, 331, :_reduce_550,
  0, 332, :_reduce_551,
  2, 332, :_reduce_552,
  1, 335, :_reduce_553,
  2, 335, :_reduce_554,
  0, 340, :_reduce_555,
  4, 335, :_reduce_556,
  1, 339, :_reduce_557,
  1, 339, :_reduce_558,
  1, 339, :_reduce_559,
  1, 339, :_reduce_560,
  1, 339, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 341, :_reduce_564,
  3, 342, :_reduce_565,
  1, 328, :_reduce_566,
  2, 328, :_reduce_567,
  1, 218, :_reduce_568,
  1, 218, :_reduce_569,
  1, 218, :_reduce_570,
  1, 218, :_reduce_571,
  1, 208, :_reduce_572,
  1, 208, :_reduce_573,
  1, 208, :_reduce_574,
  1, 208, :_reduce_575,
  1, 208, :_reduce_576,
  1, 208, :_reduce_577,
  1, 209, :_reduce_578,
  1, 209, :_reduce_579,
  1, 209, :_reduce_580,
  1, 209, :_reduce_581,
  1, 209, :_reduce_582,
  1, 209, :_reduce_583,
  1, 209, :_reduce_584,
  1, 241, :_reduce_585,
  1, 241, :_reduce_586,
  1, 177, :_reduce_587,
  1, 177, :_reduce_588,
  1, 182, :_reduce_589,
  1, 182, :_reduce_590,
  0, 343, :_reduce_591,
  4, 251, :_reduce_592,
  0, 251, :_reduce_593,
  3, 253, :_reduce_594,
  0, 345, :_reduce_595,
  3, 253, :_reduce_596,
  4, 344, :_reduce_597,
  2, 344, :_reduce_598,
  2, 344, :_reduce_599,
  1, 344, :_reduce_600,
  2, 347, :_reduce_601,
  0, 347, :_reduce_602,
  6, 288, :_reduce_603,
  8, 288, :_reduce_604,
  4, 288, :_reduce_605,
  6, 288, :_reduce_606,
  4, 288, :_reduce_607,
  6, 288, :_reduce_608,
  2, 288, :_reduce_609,
  4, 288, :_reduce_610,
  6, 288, :_reduce_611,
  2, 288, :_reduce_612,
  4, 288, :_reduce_613,
  2, 288, :_reduce_614,
  4, 288, :_reduce_615,
  1, 288, :_reduce_616,
  0, 288, :_reduce_617,
  1, 283, :_reduce_618,
  1, 283, :_reduce_619,
  1, 283, :_reduce_620,
  1, 283, :_reduce_621,
  1, 265, :_reduce_none,
  1, 265, :_reduce_623,
  1, 349, :_reduce_624,
  1, 350, :_reduce_625,
  3, 350, :_reduce_626,
  1, 275, :_reduce_627,
  3, 275, :_reduce_628,
  1, 351, :_reduce_629,
  2, 352, :_reduce_630,
  1, 352, :_reduce_631,
  2, 353, :_reduce_632,
  1, 353, :_reduce_633,
  1, 269, :_reduce_634,
  3, 269, :_reduce_635,
  1, 346, :_reduce_636,
  3, 346, :_reduce_637,
  1, 323, :_reduce_none,
  1, 323, :_reduce_none,
  2, 270, :_reduce_640,
  1, 270, :_reduce_641,
  3, 354, :_reduce_642,
  3, 355, :_reduce_643,
  1, 276, :_reduce_644,
  3, 276, :_reduce_645,
  1, 348, :_reduce_646,
  3, 348, :_reduce_647,
  1, 356, :_reduce_none,
  1, 356, :_reduce_none,
  2, 277, :_reduce_650,
  1, 277, :_reduce_651,
  1, 357, :_reduce_none,
  1, 357, :_reduce_none,
  2, 272, :_reduce_654,
  2, 271, :_reduce_655,
  0, 271, :_reduce_656,
  1, 254, :_reduce_none,
  3, 254, :_reduce_658,
  0, 242, :_reduce_659,
  2, 242, :_reduce_none,
  1, 227, :_reduce_661,
  3, 227, :_reduce_662,
  3, 358, :_reduce_663,
  2, 358, :_reduce_664,
  4, 358, :_reduce_665,
  2, 358, :_reduce_666,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 294, :_reduce_none,
  1, 294, :_reduce_none,
  1, 294, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 181, :_reduce_679,
  1, 181, :_reduce_680,
  0, 153, :_reduce_none,
  1, 153, :_reduce_none,
  0, 183, :_reduce_none,
  1, 183, :_reduce_none,
  2, 203, :_reduce_685,
  2, 180, :_reduce_686,
  0, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 252, :_reduce_690,
  1, 252, :_reduce_none,
  1, 155, :_reduce_none,
  2, 155, :_reduce_none,
  0, 224, :_reduce_694 ]

racc_reduce_n = 695

racc_shift_n = 1162

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tMETHREF => 143,
  :tBDOT2 => 144,
  :tBDOT3 => 145,
  :tNUMPARAM => 146,
  :tEQL => 147,
  :tLOWEST => 148 }

racc_nt_base = 149

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tMETHREF",
  "tBDOT2",
  "tBDOT3",
  "tNUMPARAM",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@2",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@3",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@4",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@5",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "case_body",
  "p_case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@15",
  "@16",
  "f_args",
  "do_block",
  "@17",
  "@18",
  "do_body",
  "@19",
  "operation3",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "cases",
  "p_top_expr",
  "p_cases",
  "@25",
  "@26",
  "p_top_expr_body",
  "p_expr",
  "p_args",
  "p_args_tail",
  "p_kwargs",
  "p_as",
  "p_variable",
  "p_alt",
  "p_expr_basic",
  "p_value",
  "p_const",
  "p_args_head",
  "p_arg",
  "p_args_post",
  "p_kwarg",
  "p_kwrest",
  "p_kw",
  "string_contents",
  "kwrest_mark",
  "p_primitive",
  "p_var_ref",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@27",
  "ssym",
  "dsym",
  "@28",
  "args_tail",
  "@29",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], *val[1])
                    
    result
end

def _reduce_9(val, _values, result)
                      result = val
                    
    result
end

def _reduce_10(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :error, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_11(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_12(val, _values, result)
                      result = []
                    
    result
end

def _reduce_13(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 16 omitted

def _reduce_17(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_18(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_22(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 30 omitted

def _reduce_31(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 34 omitted

def _reduce_35(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_40(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_42(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 45 omitted

# reduce 46 omitted

def _reduce_47(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_48(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_49(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_50(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_54(val, _values, result)
                      @lexer.cond.pop
                      result = [ val[1], val[2] ]
                    
    result
end

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

def _reduce_58(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_59(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_60(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_63(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_65(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_72(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_73(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_74(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 77 omitted

def _reduce_78(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_79(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_80(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_81(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_83(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_84(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 87 omitted

def _reduce_88(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_96(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_98(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_106(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_108(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_111(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 112 omitted

def _reduce_113(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_114(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_115(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 122 omitted

def _reduce_123(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_124(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_125(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

def _reduce_197(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_204(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 225 omitted

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_238(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

def _reduce_244(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_245(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_250(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 251 omitted

def _reduce_252(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_253(val, _values, result)
                      result = val
                    
    result
end

def _reduce_254(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 255 omitted

def _reduce_256(val, _values, result)
                      result = []
                    
    result
end

# reduce 257 omitted

# reduce 258 omitted

def _reduce_259(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_260(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_264(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_265(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_266(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_267(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = []
                    
    result
end

def _reduce_271(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_272(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_273(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_274(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_275(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 276 omitted

def _reduce_277(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_278(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_279(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

def _reduce_290(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_291(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_292(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_293(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_295(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_296(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_301(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_302(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_303(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_304(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_305(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_306(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_307(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_308(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_309(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 310 omitted

def _reduce_311(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_312(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_313(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_314(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_315(val, _values, result)
                      result = @builder.loop(:while, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_316(val, _values, result)
                      result = @builder.loop(:until, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_317(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_318(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_319(val, _values, result)
                      *in_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case_match(val[0], val[1],
                                             in_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.for(val[0], val[1], val[2], *val[3], val[4], val[5])
                    
    result
end

def _reduce_321(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:class)
                    
    result
end

def _reduce_322(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_323(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:sclass)
                    
    result
end

def _reduce_324(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_325(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_326(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                    
    result
end

def _reduce_327(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:def)
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_329(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_330(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:defs)
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_332(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_333(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_334(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_335(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

def _reduce_336(val, _values, result)
                      result = @builder.method_ref(val[0], val[1], val[2])
                    
    result
end

# reduce 337 omitted

def _reduce_338(val, _values, result)
                      if @context.in_class?
                        diagnostic :error, :invalid_return, nil, val[0]
                      end
                    
    result
end

# reduce 339 omitted

# reduce 340 omitted

def _reduce_341(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

def _reduce_345(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 346 omitted

def _reduce_347(val, _values, result)
                      result = val
                    
    result
end

# reduce 348 omitted

# reduce 349 omitted

def _reduce_350(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_351(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_352(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_353(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
end

def _reduce_356(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_357(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_359(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_360(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_361(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_363(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_368(val, _values, result)
                      result = []
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_370(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_371(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_372(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_373(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_376(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_378(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_380(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_381(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_382(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 383 omitted

def _reduce_384(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_385(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_386(val, _values, result)
                      @lexer.max_numparam_stack.cant_have_numparams!
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_387(val, _values, result)
                      @lexer.max_numparam_stack.cant_have_numparams!
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_388(val, _values, result)
                      @lexer.max_numparam_stack.cant_have_numparams!
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_389(val, _values, result)
                      result = []
                    
    result
end

def _reduce_390(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_391(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_392(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_393(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 394 omitted

def _reduce_395(val, _values, result)
                      @static_env.extend_dynamic
                      @lexer.max_numparam_stack.push
                      @context.push(:lambda)
                    
    result
end

def _reduce_396(val, _values, result)
                      @context.pop
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_397(val, _values, result)
                      args = @lexer.max_numparam > 0 ? @builder.numargs(@lexer.max_numparam) : val[1]
                      result = [ args, val[3] ]

                      @lexer.max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_398(val, _values, result)
                      @lexer.max_numparam_stack.cant_have_numparams!
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_399(val, _values, result)
                      if val[0].any?
                        @lexer.max_numparam_stack.cant_have_numparams!
                      end
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_400(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_401(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_402(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_403(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_404(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_405(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_406(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_407(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_408(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_409(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_411(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_412(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_413(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_414(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_415(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_416(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_417(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_418(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_419(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_420(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_421(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_422(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_423(val, _values, result)
                      @static_env.extend_dynamic
                      @lexer.max_numparam_stack.push
                    
    result
end

def _reduce_424(val, _values, result)
                      args = @lexer.max_numparam > 0 ? @builder.numargs(@lexer.max_numparam) : val[1]
                      result = [ args, val[2] ]

                      @lexer.max_numparam_stack.pop
                      @static_env.unextend
                    
    result
end

def _reduce_425(val, _values, result)
                      @static_env.extend_dynamic
                      @lexer.max_numparam_stack.push
                    
    result
end

def _reduce_426(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_427(val, _values, result)
                      args = @lexer.max_numparam > 0 ? @builder.numargs(@lexer.max_numparam) : val[2]
                      result = [ args, val[3] ]

                      @lexer.max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_428(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_429(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 430 omitted

def _reduce_431(val, _values, result)
                      @lexer.state = :expr_beg
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_432(val, _values, result)
                      @lexer.in_kwarg = val[1]
                    
    result
end

def _reduce_433(val, _values, result)
                      result = [ @builder.in_pattern(val[0], *val[2], val[3], val[5]),
                                 *val[6] ]
                    
    result
end

def _reduce_434(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 435 omitted

def _reduce_436(val, _values, result)
                      result = [ val[0], nil ]
                    
    result
end

def _reduce_437(val, _values, result)
                      result = [ val[0], @builder.if_guard(val[1], val[2]) ]
                    
    result
end

def _reduce_438(val, _values, result)
                      result = [ val[0], @builder.unless_guard(val[1], val[2]) ]
                    
    result
end

# reduce 439 omitted

def _reduce_440(val, _values, result)
                      # array patterns that end with comma
                      # like 1, 2,
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0])
                      result = @builder.array_pattern(nil, [ item ], nil)
                    
    result
end

def _reduce_441(val, _values, result)
                      result = @builder.array_pattern(nil, [val[0]].concat(val[2]), nil)
                    
    result
end

def _reduce_442(val, _values, result)
                      result = @builder.array_pattern(nil, val[0], nil)
                    
    result
end

def _reduce_443(val, _values, result)
                      result = @builder.hash_pattern(nil, val[0], nil)
                    
    result
end

# reduce 444 omitted

def _reduce_445(val, _values, result)
                      result = @builder.match_as(val[0], val[1], val[2])
                    
    result
end

# reduce 446 omitted

def _reduce_447(val, _values, result)
                      result = @builder.match_alt(val[0], val[1], val[2])
                    
    result
end

# reduce 448 omitted

# reduce 449 omitted

def _reduce_450(val, _values, result)
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_451(val, _values, result)
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = @builder.const_pattern(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_453(val, _values, result)
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_454(val, _values, result)
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = @builder.const_pattern(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = @builder.array_pattern(val[0], val[1], val[2])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = @builder.array_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_458(val, _values, result)
                      result = @builder.hash_pattern(val[0], val[1], val[2])
                    
    result
end

def _reduce_459(val, _values, result)
                      result = @builder.hash_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_460(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_462(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_463(val, _values, result)
                      result = [ *val[0], val[1] ]
                    
    result
end

def _reduce_464(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest ]
                    
    result
end

def _reduce_465(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest, *val[4] ]
                    
    result
end

def _reduce_466(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]) ]
                    
    result
end

def _reduce_467(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]), *val[3] ]
                    
    result
end

# reduce 468 omitted

def _reduce_469(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0])
                      result = [ item ]
                    
    result
end

def _reduce_470(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      last_item = @builder.match_with_trailing_comma(val[1])
                      result = [ *val[0], last_item ]
                    
    result
end

def _reduce_471(val, _values, result)
                      match_rest = @builder.match_rest(val[0], val[1])
                      result = [ match_rest ]
                    
    result
end

def _reduce_472(val, _values, result)
                      match_rest = @builder.match_rest(val[0], val[1])
                      result = [ match_rest, *val[3] ]
                    
    result
end

def _reduce_473(val, _values, result)
                      match_rest = @builder.match_rest(val[0])
                      result = [ match_rest ]
                    
    result
end

def _reduce_474(val, _values, result)
                      match_rest = @builder.match_rest(val[0])
                      result = [ match_rest, *val[2] ]
                    
    result
end

def _reduce_475(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_476(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

# reduce 477 omitted

def _reduce_478(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_479(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_480(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_481(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_482(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

def _reduce_483(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_484(val, _values, result)
                      check_kwarg_name(val[0])

                      result = @builder.match_hash_var(val[0])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = @builder.match_hash_var_from_str(val[0], val[1], val[2])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = [ @builder.match_rest(val[0], val[1]) ]
                    
    result
end

def _reduce_488(val, _values, result)
                      result = [ @builder.match_rest(val[0], nil) ]
                    
    result
end

# reduce 489 omitted

def _reduce_490(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_493(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

def _reduce_497(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_498(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

def _reduce_507(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_508(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_509(val, _values, result)
                      result = @builder.match_var(val[0])
                    
    result
end

def _reduce_510(val, _values, result)
                      lvar = @builder.accessible(@builder.ident(val[1]))
                      result = @builder.pin(val[0], lvar)
                    
    result
end

def _reduce_511(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_512(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_513(val, _values, result)
                      result = @builder.const(val[0])
                   
    result
end

def _reduce_514(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_515(val, _values, result)
                      result = []
                    
    result
end

def _reduce_516(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 517 omitted

# reduce 518 omitted

def _reduce_519(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 520 omitted

def _reduce_521(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

def _reduce_525(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_526(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_527(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_528(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_529(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_530(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_531(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_532(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_533(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_534(val, _values, result)
                      result = []
                    
    result
end

def _reduce_535(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_536(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_537(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_538(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_539(val, _values, result)
                      result = []
                    
    result
end

def _reduce_540(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_541(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_542(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_543(val, _values, result)
                      result = []
                    
    result
end

def _reduce_544(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_545(val, _values, result)
                      result = []
                    
    result
end

def _reduce_546(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_547(val, _values, result)
                      result = []
                    
    result
end

def _reduce_548(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_549(val, _values, result)
                      result = []
                    
    result
end

def _reduce_550(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_551(val, _values, result)
                      result = []
                    
    result
end

def _reduce_552(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_553(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_554(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_555(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_556(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_557(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_558(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_559(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_560(val, _values, result)
                      result = @builder.numparam(val[0])
                    
    result
end

# reduce 561 omitted

# reduce 562 omitted

# reduce 563 omitted

def _reduce_564(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_565(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_566(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_567(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_568(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_569(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_570(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_571(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_572(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_573(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_574(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_575(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_576(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_577(val, _values, result)
                      result = @builder.numparam(val[0])
                    
    result
end

def _reduce_578(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_579(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_580(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_581(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_582(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_583(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_584(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_585(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_586(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_587(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_588(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_589(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_590(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_591(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_592(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_593(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_594(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_595(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_596(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_597(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_598(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_599(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_600(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_601(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_602(val, _values, result)
                      result = []
                    
    result
end

def _reduce_603(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_604(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_605(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_606(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_607(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_608(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_609(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_610(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_611(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_612(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_613(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_614(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_615(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_616(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_617(val, _values, result)
                      result = []
                    
    result
end

def _reduce_618(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_619(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_620(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_621(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 622 omitted

def _reduce_623(val, _values, result)
                      @static_env.declare val[0][0]

                      @lexer.max_numparam_stack.cant_have_numparams!

                      result = val[0]
                    
    result
end

def _reduce_624(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_625(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_626(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_627(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_628(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_629(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      @lexer.max_numparam_stack.cant_have_numparams!

                      result = val[0]
                    
    result
end

def _reduce_630(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_631(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_632(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_633(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_634(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_635(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_636(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_637(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 638 omitted

# reduce 639 omitted

def _reduce_640(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_641(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_642(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_643(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_644(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_645(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_646(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_647(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 648 omitted

# reduce 649 omitted

def _reduce_650(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_651(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 652 omitted

# reduce 653 omitted

def _reduce_654(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_655(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_656(val, _values, result)
                      result = []
                    
    result
end

# reduce 657 omitted

def _reduce_658(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_659(val, _values, result)
                      result = []
                    
    result
end

# reduce 660 omitted

def _reduce_661(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_662(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_663(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_664(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_665(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_666(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 667 omitted

# reduce 668 omitted

# reduce 669 omitted

# reduce 670 omitted

# reduce 671 omitted

# reduce 672 omitted

# reduce 673 omitted

# reduce 674 omitted

# reduce 675 omitted

# reduce 676 omitted

# reduce 677 omitted

# reduce 678 omitted

def _reduce_679(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_680(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 681 omitted

# reduce 682 omitted

# reduce 683 omitted

# reduce 684 omitted

def _reduce_685(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_686(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 687 omitted

# reduce 688 omitted

# reduce 689 omitted

def _reduce_690(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 691 omitted

# reduce 692 omitted

# reduce 693 omitted

def _reduce_694(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby27
  end   # module Parser
